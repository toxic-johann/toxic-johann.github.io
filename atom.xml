<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Toxic]]></title>
  <subtitle><![CDATA[李猜猜，被折磨得死去活来的菜鸟]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-27T10:27:35.110Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[to-xic]]></name>
    <email><![CDATA[toxic.johann@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[尝试一下素描化]]></title>
    <link href="http://yoursite.com/2016/03/27/create-a-sketch/"/>
    <id>http://yoursite.com/2016/03/27/create-a-sketch/</id>
    <published>2016-03-27T09:09:56.000Z</published>
    <updated>2016-03-27T10:27:35.110Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/zhangzhe" alt="先上一发效果图"></p>
<p>如果你只是为了看图的话，直接向下拉就好。</p>
<p>没错，还是继续讨论ascii化图片的问题。上周我尝试了通过<a href="http://blog.toxicjohann.com/2016/03/20/adjust-contrast-problem/" target="_blank" rel="external">调整对比度</a>来让图片更加易看。但是我们可以看到，效果还不能达到我们的理想状态。我们尝试制造出来的ascii化代码图，应该是只关注于边框，而尽可能忽略大片颜色的细微变化。这让我想起了以前绘画中的描边技术，当然再进一步就是素描。</p>
<p>那么我们知道<a href="http://jingyan.baidu.com/article/59a015e38c4533f794886521.html" target="_blank" rel="external">在photoshop中进行素描化</a>是十分简单的。总结起来就是以下几步：</p>
<blockquote>
<ol>
<li>灰度化</li>
<li>反色（反相）</li>
<li>高斯模糊</li>
<li>颜色减淡</li>
</ol>
</blockquote>
<p>这个听起来还是比较简单的。不过为什么要这么做呢。所以我们先来分析一下这么做的理由。</p>
<ul>
<li><strong>理论环节（不喜欢数学的可以跳过）</strong></li>
</ul>
<p>灰度化还是很容理解的。图片转化为素描必然是只有黑白的。那么灰度化是很正常的。</p>
<p>然后反色目测是用来叠加的，因为我们会用到颜色减淡这个方法。</p>
<p>不过如果我们理解不了颜色减淡叠加，那么我们就不能理解为什么要用高斯模糊和进行反色了。</p>
<p>所以我们先看颜色减淡叠加的公式。设基色为a，叠加色为b,结果为c</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = min(a + a*b/(<span class="number">255</span>-b),<span class="number">255</span>)</span><br></pre></td></tr></table></figure>
<p>根据公式我们可以推测到。</p>
<ul>
<li>如果b为黑色，即b=0,那么c=a。</li>
<li>如果b为白色，即b=255，那么c=255。</li>
<li>如果b偏向于黑色，即b&lt;128，那么c&lt;2a</li>
<li>如果b偏向于白色，即b&gt;128，那么c&gt;2a</li>
</ul>
<p>分析了下情况，我发现这个对于我没什么卵用。。。那么我就先去掉高斯模糊，单纯考虑反相之后进行颜色减淡处理会得到什么。</p>
<p>设基色为a，则叠加色为255-a。则有如下推导</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = min(a + a*b/(<span class="number">255</span>-b),<span class="number">255</span>)</span><br><span class="line">  = min(a + a*(<span class="number">255</span><span class="operator">-a</span>)/(<span class="number">255</span>-<span class="number">255</span>+a),<span class="number">255</span>)</span><br><span class="line">  = min(a + <span class="number">255</span><span class="operator">-a</span>,<span class="number">255</span>)</span><br><span class="line">  = <span class="number">255</span></span><br></pre></td></tr></table></figure>
<p>也就是说，与反相后的图片叠加，得出来只是一片白色。不过这个貌似刚好得出来255。有点玄机。所以这个高斯处理就很重要了。</p>
<p>这个时候，我们假设高斯处理带来的变化是d（delta）。即有如下推导</p>
<p>设a为基色，则叠加色为b=a+d。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = min(a + a*b/(<span class="number">255</span>-b),<span class="number">255</span>)</span><br><span class="line">  = min(a + a*(<span class="number">255</span><span class="operator">-a</span><span class="operator">-d</span>)/(<span class="number">255</span>-<span class="number">255</span>+a+d),<span class="number">255</span>)</span><br><span class="line">  = min(a + a*(<span class="number">255</span><span class="operator">-a</span><span class="operator">-d</span>)/(a+d),<span class="number">255</span>)</span><br><span class="line">  = min(b<span class="operator">-d</span> + (b<span class="operator">-d</span>)*(<span class="number">255</span>-b)/b,<span class="number">255</span>)</span><br><span class="line">  = min(b<span class="operator">-d</span> + (<span class="number">255</span>*b-<span class="number">255</span>*d-b*b+b*d)/b,<span class="number">255</span>)</span><br><span class="line">  = min(b - d + <span class="number">255</span> - <span class="number">255</span>*d/b - b + d,<span class="number">255</span>)</span><br><span class="line">  = min(<span class="number">255</span>-<span class="number">255</span>*(d/b),<span class="number">255</span>)</span><br></pre></td></tr></table></figure>
<p>这时候我们就可以很明显看出来了。假如d存在且大于0，则得出来的颜色偏向黑色，否则为白色。</p>
<p>这个结果很重要，那就是以为这，我们可以通过delta来留下我们所需要的颜色。即，边框。</p>
<p>这个时候我们就可以来研究下<a href="http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html" target="_blank" rel="external">高斯模糊</a>了。</p>
<p>这个解释我就不详细说了，因为真的挺长。所以我就简单解释为，高斯模糊就是把周边数据与自身作了均值处理。</p>
<p>这个对于我们获取边框还是挺有用的。上图。我们引入一个简单的方块，他的底色是白色。</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/1sketch.png" alt="高斯模糊前样例"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/7.pic.jpg" alt="灰度后"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/8.pic.jpg" alt="模糊后"></p>
<p>我们可以推测得出，处于大色块中间的像素点，因为他附近的色块与其相同，所以他的颜色没有变化。</p>
<p>而处于色块交界处的点，由于两边的像素点不一样，所以造成了差异。因此可以算出delta。</p>
<p>这样子在我们进行色块叠加的时候，这种颜色因此留了下来，也就是我们需要的边框了。而其他大色块，则成为了留白。</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/6.pic.jpg" alt="素描化的色块"></p>
<p>所以这就是素描滤镜的原理。</p>
<ul>
<li><strong>代码实现</strong></li>
</ul>
<p>灰度化上次已经说过了，这次就不说了。</p>
<p><strong><em>反色</em></strong></p>
<p>直接获得像素点，然后将用255减去色值即可。</p>
<p><strong><em>颜色减淡</em></strong></p>
<p>按照公式代入就好</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Math</span>.min((each+(each*b[index])/(<span class="number">255</span>-b[index])),<span class="number">255</span>);</span><br></pre></td></tr></table></figure>
<p><strong><em>高斯模糊</em></strong></p>
<p>有兴趣的去看看样例，这里我就直接说鸟。</p>
<p>首先，我们要决定一下究竟用<a href="http://blog.csdn.net/markl22222/article/details/10313565" target="_blank" rel="external">两次一维高斯模糊还是一次二维高斯模糊好</a>，三次均值的快速高斯模糊这里我暂且不讨论。有兴趣可以看看。效果也是一样的。</p>
<p>设循环一次图像为n（像素点个数），循环高斯模糊半径为r。则有</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">两次一维高斯，循环次数</span><br><span class="line"><span class="number">2</span>*n*r</span><br><span class="line">一次二维高斯,循环次数</span><br><span class="line">n*r*r</span><br></pre></td></tr></table></figure>
<p>显然，我们两次一维高斯模糊更加划算。</p>
<p>首先计算出高斯矩阵</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._getOneGaussianMatrix = (radius,sigma)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> gaussMatrix = [];</span><br><span class="line">    <span class="keyword">let</span> gaussSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计算矩阵计算系数</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>/(<span class="built_in">Math</span>.sqrt(<span class="number">2</span>*<span class="built_in">Math</span>.PI)*sigma);</span><br><span class="line">    <span class="keyword">let</span> b = -<span class="number">1</span>/(<span class="number">2</span>*sigma*sigma);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成高斯矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> x = -radius;x&lt;=radius;x++)&#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = a*<span class="built_in">Math</span>.exp(b*x*x);</span><br><span class="line">        gaussMatrix.push(tmp);</span><br><span class="line">        gaussSum = gaussSum + tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归一化，确保高斯矩阵的最终的和值在0/1之间</span></span><br><span class="line"></span><br><span class="line">    gaussMatrix = gaussMatrix.map(each=&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> each/gaussSum;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        matrix:gaussMatrix,</span><br><span class="line">        sum:gaussSum</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>然后用两次一维高斯模糊处理imageData</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._oneGaussianOp = (imageData,width,height,radius,sigma,alpha)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> gauss = self._getOneGaussianMatrix(radius,sigma);</span><br><span class="line">    <span class="keyword">let</span> length = imageData.length;</span><br><span class="line">    imageData = <span class="keyword">this</span>._testArrayMap(imageData);</span><br><span class="line">    <span class="comment">// x方向进行高斯运算</span></span><br><span class="line">    <span class="keyword">let</span> ximage= imageData.map((each,index)=&gt;&#123;</span><br><span class="line">        <span class="comment">// 获取各个位置</span></span><br><span class="line">        <span class="keyword">let</span> pos = index%<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">let</span> hei = ~~(index/<span class="number">4</span>/width);</span><br><span class="line">        <span class="keyword">let</span> wid = ~~(index/<span class="number">4</span>%width);</span><br><span class="line">        <span class="comment">// 不处理透明度</span></span><br><span class="line">        <span class="keyword">if</span>(!alpha &amp;&amp; index%<span class="number">4</span> == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> each;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> r=-radius;r&lt;=radius;r++)&#123;</span><br><span class="line">            <span class="keyword">let</span> data  = imageData[((width+wid+r)%width+width*(hei))*<span class="number">4</span>+pos];</span><br><span class="line">            <span class="keyword">let</span> gdata = gauss.matrix[r+radius]*data; </span><br><span class="line">            sum = sum+gdata;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// y方向进行高斯运算，在X处理后</span></span><br><span class="line">    <span class="keyword">let</span> yimage= ximage.map((each,index)=&gt;&#123;</span><br><span class="line">        <span class="keyword">let</span> pos = index%<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">let</span> hei = ~~(index/<span class="number">4</span>/width);</span><br><span class="line">        <span class="keyword">let</span> wid = ~~(index/<span class="number">4</span>%width);</span><br><span class="line">        <span class="comment">// 不处理透明度</span></span><br><span class="line">        <span class="keyword">if</span>(!alpha &amp;&amp; index%<span class="number">4</span> == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> each;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> r=-radius;r&lt;=radius;r++)&#123;</span><br><span class="line">            <span class="keyword">let</span> data  = ximage[((height+hei+r)%height*width+wid)*<span class="number">4</span>+pos];</span><br><span class="line">            <span class="keyword">let</span> gdata = gauss.matrix[r+radius]*data; </span><br><span class="line">            sum = sum+gdata;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> yimage;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这里主要是定位每个位置要注意下。</p>
<p>然后我们就完成了高斯模糊处理。</p>
<p>这个时候我们就可以完成素描滤镜了。</p>
<ul>
<li><strong>几个小细节</strong></li>
</ul>
<p>Uint8ClampedArray本质上是一个用object封装成的array。所以在某些浏览器上（没错说的就是iPhone上面的safari），像map、reduce、from这种方法，很可能没有。这时候我们要注意做特性检测，然后转化成Array进行处理。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._testArrayMap = (arr)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!arr.map)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">this</span>._testArrayReduce = (arr)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!arr.reduce)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>._generateUint8ClampedArray = arr=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>._isUint8ClampedArray(arr))&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"could only generate Uint8ClampedArray from an array"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特性判断</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Uint8ClampedArray</span>.from)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Uint8ClampedArray</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Uint8ClampedArray</span>.from(arr);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>貌似安卓的微信浏览器里用的不是Uint8ClampedArray，是CanvasPixelArray对象。然后因为我这个只是自己玩玩。。所以我就没有管。所以部分安卓可能不能用微信访问<a href="http://wechat.toxicjohann.com/home/index/ascii" target="_blank" rel="external">体验地址</a>。可以用chrome或者其他浏览器试试。</p>
<p>canvas绘制和数据处理的时候貌似占用了整个进程，因此我的处理提示并没有打出来。这个以后我应该会尝试用Web Workers去进行解决。但是这次没有时间暂且不用。</p>
<p>二次一维高斯模糊做出来的所花的时间对于一个800*500的图像大概200ms+。但是我这里整个图片处理，因为要经历很多其他步骤，因此有较多循环。所以我可以看到一个像素化处理大概要用1200ms左右，在电脑上，手机上由于本身处理不大好，而且数组不断改变，所花时间就更长了。大概会有几十秒的延迟。</p>
<p>这个主要是第一我有多次循环，例如取得反色图像之类的这种其实我是可以合在一个循环中做完的。</p>
<p>不过由于只是造轮子练手，而且时间也不算充足。这次我就先不继续优化了。所以大家觉得慢不要打我。</p>
<p>体验网址还是<a href="http://wechat.toxicjohann.com/home/index/ascii" target="_blank" rel="external">老地方</a>。我调了一下适配，手机上应该会比以前好按点。</p>
<ul>
<li><strong>我知道你们是进来看图的</strong></li>
</ul>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/4.pic.jpg" alt="见的多了"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/9.pic.jpg" alt="谈笑风生"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/zhangzhe" alt="一颗赛艇"></p>
<p>当然模特还是用回原来的好</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/3.pic.jpg" alt="滋不滋磁"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/10.pic.jpg" alt="搞个大新闻"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/2.pic_hd.jpg" alt="批判一番"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/zhangzhe" alt="先上一发效果图"></p>
<p>如果你只是为了看图的话，直接向下拉就好。</p>
<p>没错，还是继续讨论ascii化图片的问题。上周我尝试了通过]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[编写一个转盘插件]]></title>
    <link href="http://yoursite.com/2016/03/26/create-a-turntable/"/>
    <id>http://yoursite.com/2016/03/26/create-a-turntable/</id>
    <published>2016-03-26T04:23:00.000Z</published>
    <updated>2016-03-26T06:00:49.698Z</updated>
    <content type="html"><![CDATA[<p>因为业务需要，最近要编写一个转盘插件。</p>
<p>现在网上一般一次性的转盘插件大都是用图片做的就好了，轻松。但是考虑到我们这个插件里面设定的奖项会随机更改，因此我选择了用canvas。</p>
<p>canvas绘制转盘的也是十分方便的。原理就类似于绘制一个饼图。然后通过transform的属性，让canvas旋转。达到动起来的目的。</p>
<p>那么我们该怎么做呢？</p>
<ul>
<li><strong>首先先画一个饼</strong></li>
</ul>
<p>这个在网上有些相关的教程，比如<a href="http://www.alloyteam.com/2015/05/ru-he-yong-canvas-hua-tu-biao-1-shan-xing-tu-he-huan-xing-tu/" target="_blank" rel="external">腾讯的Alloyteam就有相关的文章</a>。</p>
<p>一般来说，我们会得到一个奖品的几率图。如果你要画一个按照产品几率的大小变化的饼图，你需要按照他们的几率计算出每个扇面该占有的角度。如果你是要等分的饼图，那么你就按照扇面的个数算出所需的角度大小。</p>
<p>接着我们要学会去绘画一个扇形。</p>
<p>画扇形众所周知就是两条直线边，和一个弧形。所以我们可以分解成，先画一个从圆形到弧形的边，然后画一个弧形，紧接着闭合曲线。就可以完成一个扇形。</p>
<p>画弧形的函数是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/arc" target="_blank" rel="external">arc</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);</span><br><span class="line"><span class="comment">//圆心X坐标、圆心Y左边、半径、圆弧开始弧度、圆弧结束弧度、是否逆时针</span></span><br></pre></td></tr></table></figure>
<p>那么我们就可以这么用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.context.beginPath();</span><br><span class="line"><span class="comment">// 移动到圆心</span></span><br><span class="line">self.context.moveTo(cx, cy);</span><br><span class="line"><span class="comment">// 从圆心画直线到计算好的圆外边上的点</span></span><br><span class="line">self.context.lineTo(startX, startY);</span><br><span class="line"><span class="comment">// 从外边上的点画曲线</span></span><br><span class="line"><span class="comment">// 弧度和角度转换，这个注意</span></span><br><span class="line">self.context.arc(cx,cy,r,startRadius,endRadius, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//上色</span></span><br><span class="line">self.context.fillStyle =color;</span><br><span class="line">self.context.fill();</span><br><span class="line">self.context.closePath();</span><br></pre></td></tr></table></figure>
<p>然后我们不断调用，就可以画出来一个饼。</p>
<p>然后转盘上的话，一般都是有字的。但是canvas画字，没错。只能打横画！不能竖排，不能旋转。</p>
<p>这里我看设计本来是竖排的，竖排的话，我就要将他一个个字的画上去，比较麻烦。这个以后我可以玩玩。哈哈。</p>
<p>然后我们后来确定的做法，是按照横排将字体画上去。但是这个还是个问题，因为转盘每个字当然是以圆心为轴进行旋转的。所以字体还是要旋转的。</p>
<p>这个时候我们就只有一种办法了。就是先将canvas旋转合适的角度，然后将字体写上去。就此达到我们的目的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">self.context.fillStyle = fontColor;</span><br><span class="line">self.context.save();</span><br><span class="line">self.context.translate(textX, textY);</span><br><span class="line">self.context.rotate((startRadius+endRadius)/<span class="number">2</span>+<span class="built_in">Math</span>.PI/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">self.context.font = <span class="string">"28px SimHei"</span>;</span><br><span class="line">self.context.textAlign = <span class="string">'center'</span>;</span><br><span class="line">self.context.fillText(text, <span class="number">0</span>, <span class="number">0</span>,textWidth);</span><br><span class="line"></span><br><span class="line">self.context.restore();</span><br></pre></td></tr></table></figure>
<p>那么就这样，我们画出了一个带字的饼，也就是转盘了。</p>
<ul>
<li><strong>让转盘动起来</strong></li>
</ul>
<p>让转盘动起来只需要动画就好。但是，我们这个转盘是需要停在某一个地方的。所以我们需要一个可控的结果。因此，我采用了js进行控制的动画。</p>
<p>如果适配的浏览器支持requestAnimationFrame，我觉得还是用requestAnimationFrame比较好。由于我需要适配的浏览器并不全部都支持，因此我才用了setTimeout，原理上也是差不多。</p>
<p>既然采用setTimeout的话，我们需要把握的就是转盘每一个时间点转过的角度。然后因为我们要弄出来像慢慢停下的效果，所以我们需要对位置进行一些控制。</p>
<p>我们首先先算好转盘最终要停下来的地点，然后根据我们需要的时间算出速度和加速度。我们可以认为抓盘是在做一个匀减速运动。那样子就给了我们一个慢慢停下来的效果。</p>
<p>然后在每个时间点，我们算出他在相应的时间段里走过的路程，将转盘移动到相应的角度，算出下一步的速度值，进行循环调用，直到最后停下来即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_rotateBase:<span class="function"><span class="keyword">function</span>(<span class="params">v0,a,delta,target,s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self=<span class="keyword">this</span>;</span><br><span class="line">  s = s || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 计算出单位时间内应该移动的距离</span></span><br><span class="line">  <span class="keyword">let</span> angle = v0*delta+<span class="number">0.5</span>*a*delta*delta;</span><br><span class="line">  <span class="comment">// 计算出下一次调用的速度</span></span><br><span class="line">  <span class="keyword">let</span> vt = v0+a*delta;</span><br><span class="line">  <span class="comment">// 计算出已经总共移动的距离。</span></span><br><span class="line">  s = angle+s;</span><br><span class="line">  <span class="comment">// 如果速度归为0，我们即可认为转动结束，不过由于到时候落位不转，我们直接把落位调到目标位置</span></span><br><span class="line">  <span class="comment">// 因为这个时候速度已经非常的慢，而且单位时间比较短，我们可以忽略这种误差</span></span><br><span class="line">  <span class="comment">// 因此这种调整并不会对用户带来十分不好的体验。</span></span><br><span class="line">  <span class="keyword">if</span>(v0 &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">      s = target;</span><br><span class="line">  &#125;</span><br><span class="line">  self._rotate(s);</span><br><span class="line">  <span class="keyword">if</span>(v0 &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 增加回调函数用于监听</span></span><br><span class="line">      self.trigger(<span class="string">"rotated"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环调用</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self._rotateBase(vt,a,delta,target,s);</span><br><span class="line">  &#125;,delta)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这样子我们的转盘就动起来了。</p>
<ul>
<li><strong>让转盘服务于服务端</strong></li>
</ul>
<p>但是单单动起来是不够的。一般我们做活动的话，抽奖逻辑都是安放在服务端，因此我们一开始是不确定结果。但是用户按了之后我们不能不让他转。所以我们要设计一个不断转动的函数。对他进行处理。</p>
<p>一般写法就是我们直接让他匀速不断运动，然后收到结果之后，把timeout去掉，进入我们知道结果的滚动进行展示。</p>
<p>但是这样子会有一个问题。因为你是从头开始转的，你转的那一瞬间所在位置可能会差别比较大。因此会造成用户看上去转盘速度忽然变化了的错觉。</p>
<p>那怎么办呢。最终我采取了这个办法。</p>
<p>我们根据用户设定的转动时间，算出最大的转动速度。然后让转盘一直保持这个速度进行匀速转动。当我们得知结果的时候，设定这个匀速运动的速度为初速度。计算出所需要的加速度，进行减速运动。而重要的是，我们要让他在大概恢复原位的时候进行切换。</p>
<p>因此我把匀速运动的函数这么写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于服务器没有返回的时候调用进行空转</span></span><br><span class="line">_keepRotate:<span class="function"><span class="keyword">function</span>(<span class="params">v0,delta,s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> angle = v0*delta;</span><br><span class="line">  s = s || <span class="number">0</span>;</span><br><span class="line">  s = angle + s;</span><br><span class="line">  self._rotate(s);</span><br><span class="line">  self.rotateId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self._keepRotate(v0,delta,s);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 近似回归原位的时候触发回归机制</span></span><br><span class="line">  <span class="keyword">if</span>(~~(s%<span class="number">180</span>/<span class="number">10</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">      self.trigger(<span class="string">"recovery"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这样子我们就可以让他无缝切换了。</p>
<ul>
<li><strong>小细节</strong></li>
</ul>
<p>转动的动画加上<code>translateZ(0)</code>。避免浏览器频繁的重置。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_rotate:<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  $(self.canvas).css(<span class="string">'-webkit-transform'</span>,<span class="string">'rotate('</span>+s+<span class="string">'deg) translateZ(0)'</span>); </span><br><span class="line">  $(self.canvas).css(<span class="string">'-moz-transform'</span>,<span class="string">'rotate('</span>+s+<span class="string">'deg) translateZ(0)'</span>); </span><br><span class="line">  $(self.canvas).css(<span class="string">'-o-transform'</span>,<span class="string">'rotate('</span>+s+<span class="string">'deg) translateZ(0)'</span>); </span><br><span class="line">  $(self.canvas).css(<span class="string">'transform'</span>,<span class="string">'rotate('</span>+s+<span class="string">'deg) translateZ(0)'</span>); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>delta设为16。</p>
<p>事件还是挺有用的。</p>
<p>以上就是我的世界过程了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为业务需要，最近要编写一个转盘插件。</p>
<p>现在网上一般一次性的转盘插件大都是用图片做的就好了，轻松。但是考虑到我们这个插件里面设定的奖项会随机更改，因此我选择了用canvas。</p>
<p>canvas绘制转盘的也是十分方便的。原理就类似于绘制一个饼图。然后通]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[bootstrap-datetimepicker的一个bug]]></title>
    <link href="http://yoursite.com/2016/03/22/bootstrap-datetimepicker-bug/"/>
    <id>http://yoursite.com/2016/03/22/bootstrap-datetimepicker-bug/</id>
    <published>2016-03-22T11:02:25.000Z</published>
    <updated>2016-03-22T11:19:05.766Z</updated>
    <content type="html"><![CDATA[<p>因为要做一个日历加时间的选择器，又嫌懒。于是直接用了网上介绍比较完整的bootstrap-datetimepicker。</p>
<p><a href="http://www.bootcss.com/p/bootstrap-datetimepicker/index.htm" target="_blank" rel="external">中文官网</a></p>
<p><a href="https://github.com/smalot/bootstrap-datetimepicker" target="_blank" rel="external">github地址</a></p>
<p>选择的时候主要考虑的是，语言切换是否方便，样式更改是否方便，大小是否合适，会否依赖奇奇怪怪的东西。</p>
<p>综上所述，觉得这个组件还是能用的。</p>
<p>于是就开始用，引入什么的都是比较简单的。由于我们用requirejs，因此直接就配置requirejs就好了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        <span class="string">"datetimepicker"</span>:<span class="string">'/resource/module/bootstrap-datetimepicker/js/bootstrap-datetimepicker'</span>,</span><br><span class="line">        <span class="string">"datetimepickerLanguage"</span>:<span class="string">'/resource/module/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'datetimepicker'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">"datetimepickerLanguage"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self._initPicker();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>用的时候覆盖样式也是比较方便的，反正css看清楚，不是什么难题。</p>
<p>但是用的时候发现一个问题。</p>
<p>就是刚刚初始化datetimepicker后，datetimepicker会自动跳出来。然后这个时候甚至不能用他的方法把他hide掉。因为他内部此时<code>this.isVisible = false</code>。简直瞎了我狗眼。</p>
<p>既然不能用，那么我手动帮他hide咯。但是发现他的input和table之间没有明显的对应关系。不会打什么id，或者明显的attribute之类的。</p>
<p>简直神烦，唯有深入源码。</p>
<p>首先发现hide函数是对象datetimepicker的prototype。</p>
<p>然后发现这个datetimepicker的对象里有一个picker的对象存着table的指针。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hide: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.isVisible) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isInline) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">this</span>.picker.hide(); </span><br><span class="line">  <span class="comment">// this就是datetimepicker</span></span><br><span class="line">  <span class="comment">// 可以看到就是这里他是通过jQuery把table给隐藏掉的。</span></span><br><span class="line">  $(<span class="built_in">window</span>).off(<span class="string">'resize'</span>, <span class="keyword">this</span>.place);</span><br><span class="line">  <span class="keyword">this</span>.viewMode = <span class="keyword">this</span>.startViewMode;</span><br><span class="line">  <span class="keyword">this</span>.showMode();</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.isInput) &#123;</span><br><span class="line">    $(<span class="built_in">document</span>).off(<span class="string">'mousedown'</span>, <span class="keyword">this</span>.hide);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">this</span>.forceParse &amp;&amp;</span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">this</span>.isInput &amp;&amp; <span class="keyword">this</span>.element.val() ||</span><br><span class="line">          <span class="keyword">this</span>.hasInput &amp;&amp; <span class="keyword">this</span>.element.find(<span class="string">'input'</span>).val()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">this</span>.setValue();</span><br><span class="line">  <span class="keyword">this</span>.isVisible = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.element.trigger(&#123;</span><br><span class="line">    type: <span class="string">'hide'</span>,</span><br><span class="line">    date: <span class="keyword">this</span>.date</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>那么我们就探求怎么样把这个对象拿出来。</p>
<p>直接查看最终执行的绑定代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$.fn.datetimepicker = <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    args.shift();</span><br><span class="line">    <span class="keyword">var</span> internal_return;</span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">        data = $<span class="keyword">this</span>.data(<span class="string">'datetimepicker'</span>),</span><br><span class="line">        options = <span class="keyword">typeof</span> option == <span class="string">'object'</span> &amp;&amp; option;</span><br><span class="line">      <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        $<span class="keyword">this</span>.data(<span class="string">'datetimepicker'</span>, (data = <span class="keyword">new</span> Datetimepicker(<span class="keyword">this</span>, $.extend(&#123;&#125;, $.fn.datetimepicker.defaults, options))));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> option == <span class="string">'string'</span> &amp;&amp; <span class="keyword">typeof</span> data[option] == <span class="string">'function'</span>) &#123;</span><br><span class="line">        internal_return = data[option].apply(data, args);</span><br><span class="line">        <span class="keyword">if</span> (internal_return !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (internal_return !== <span class="literal">undefined</span>)</span><br><span class="line">      <span class="keyword">return</span> internal_return;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首先要知道return的这个this是我们调用方法的对象，就是那个input元素，所以不是我们想要的。</p>
<p>然后发现了这么神奇的一句话</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">this</span>.data(<span class="string">'datetimepicker'</span>, (data = <span class="keyword">new</span> Datetimepicker(<span class="keyword">this</span>, $.extend(&#123;&#125;, $.fn.datetimepicker.defaults, options))));</span><br></pre></td></tr></table></figure>
<p>可以看到他们在jQuery上面存储了这个Datetimepicker的对象。</p>
<p>所以我们可以这样取出来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = $(self).find(<span class="string">".form_datetime"</span>).datetimepicker(&#123;</span><br><span class="line">    format: <span class="string">"yyyy-mm-dd hh:ii:ss"</span>,</span><br><span class="line">    autoclose: <span class="literal">true</span>,</span><br><span class="line">    language:<span class="string">"zh-CN"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对应的datetimepicker</span></span><br><span class="line"><span class="comment">// 因为没有明显的差异化标记，因此通过这种方式获取</span></span><br><span class="line">self.datetimepicker = $(input).data(<span class="string">"datetimepicker"</span>);</span><br></pre></td></tr></table></figure>
<p>虽然有些蛋疼，但是这样我们得到了对应的table，可以做很多事情了。</p>
<p>当然，你也可以直接使用内联模式。这样子table就直接在你指定的div里，不用这么麻烦来查找。但是因为一些需求的原因我们用内联不是很方便。</p>
<p>总之，还是多看别人的代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为要做一个日历加时间的选择器，又嫌懒。于是直接用了网上介绍比较完整的bootstrap-datetimepicker。</p>
<p><a href="http://www.bootcss.com/p/bootstrap-datetimepicker/index.htm"]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[调整一下对比度]]></title>
    <link href="http://yoursite.com/2016/03/20/adjust-contrast-problem/"/>
    <id>http://yoursite.com/2016/03/20/adjust-contrast-problem/</id>
    <published>2016-03-20T03:39:08.000Z</published>
    <updated>2016-03-20T03:56:15.528Z</updated>
    <content type="html"><![CDATA[<p>如果还记得前几天我做的图片转换的玩意。就会发现一个问题。由于灰度的转化，丢失的数据量还是比较大。所以很多情况下，如果图片的对比度不够，很难得到我们想要的ascii码图。</p>
<p>所以这个问题还是挺好解决的，既然对比度不够，那我们就调节对比度。</p>
<p>将imageData取出，然后将其进行适当的调整即可。</p>
<p>对比度调整的原理还是比较简单的。算出灰度平均值，也就是RGB的平均值。然后将其与任意像素计算差距，按照你需要的系数进行相乘。</p>
<p>写成代码就是这样子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.adjustContrast = (imageData,coefficient)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>._isUint8ClampedArray(imageData))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"imageData need to be an Uint8ClampedArray"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  coefficient = coefficient || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> average = <span class="keyword">this</span>._getAverageOfRGB(imageData);</span><br><span class="line">  imageData = imageData.map((each,index)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 排除透明度</span></span><br><span class="line">    <span class="keyword">if</span>((index+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> each;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> delta = each-average;</span><br><span class="line">    <span class="keyword">let</span> ans = each+delta*coefficient;</span><br><span class="line">    <span class="comment">// 作防护性处理</span></span><br><span class="line">    <span class="keyword">if</span>(ans &gt; <span class="number">255</span>)&#123;</span><br><span class="line">      ans = <span class="number">255</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; <span class="number">0</span> )&#123;</span><br><span class="line">      ans = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> imageData;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>由于我这段代码主要服务的对象是canvas，也就是用canvas中的getImageData取出的数据。一般我就做一下判断。</p>
<p>因为Uint8ClamperdArray并不是数组封装，所以用Array.isArray无法将其检测。因此我用了构造函数判断这种方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._isUint8ClampedArray = arr=&gt;&#123;</span><br><span class="line">  arr = arr || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> cons = arr.constructor.toString();</span><br><span class="line">  <span class="keyword">if</span>(cons.match(<span class="string">"Uint8ClampedArray"</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们可以轻易地计算出均值，再进行简单的计算就可以得到调整后的像素数据。</p>
<p>可以看到我在这里做出了防护性处理。其实这种处理不一定需要。</p>
<p>因为Uint8ClamperdArray数据中每一个元子大小就是0~255。超出他自己会进行相应的转化。所以原理上可以省略这一段话。</p>
<p>然后利用这个方法我们就可以轻易得到我们需要的数据。</p>
<p>另外imageData是一个只读对象，不能使用<code>imageData.data = mydata</code>这种方式进行赋值。</p>
<p>所以这种时候我们可以直接采用他所封装的set方式进行处理。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageData.data.set(Photoshop.adjustContrast(imageData.data,contrast));</span><br></pre></td></tr></table></figure>
<p>这种方式就可以达到我们的目的。下面还是上图吧。</p>
<p>原图:</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/3.pic.jpg" alt="辛炜哥哥"></p>
<p>ascii转化后（粒子度为4）:</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/4.pic_hd.jpg" alt="灰色的辛炜哥哥"></p>
<p>对比度系数为5调整后的ascii转化:</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/5.pic_hd.jpg" alt="simple的辛炜哥哥"></p>
<p>just for fun，exited！</p>
<p>要玩还是去<a href="http://wechat.toxicjohann.com/home/index/ascii" target="_blank" rel="external">老地方</a>，不过没写手机支持。手机玩起来比较麻烦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果还记得前几天我做的图片转换的玩意。就会发现一个问题。由于灰度的转化，丢失的数据量还是比较大。所以很多情况下，如果图片的对比度不够，很难得到我们想要的ascii码图。</p>
<p>所以这个问题还是挺好解决的，既然对比度不够，那我们就调节对比度。</p>
<p>将imag]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[由webuploader android bug引发的问题]]></title>
    <link href="http://yoursite.com/2016/03/18/caused-by-webupload-andriod-bug/"/>
    <id>http://yoursite.com/2016/03/18/caused-by-webupload-andriod-bug/</id>
    <published>2016-03-18T10:42:02.000Z</published>
    <updated>2016-03-18T11:05:40.862Z</updated>
    <content type="html"><![CDATA[<p>这些天用<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">webuploader</a>实现一个手机上传图片的功能。做到一半发现，在电脑上是好的，在iOS上也是好的，但是在android上jpg图片会出错。</p>
<p>因为开始的时候报的是后端压缩错误，而我这边的压缩环境也布置的不好。一番捣鼓后，发觉还是不行。</p>
<p>仔细看报错，说我的文件是空文件，但是文件名是存在的。直到我用open命令试图打开这个“一直存在的图片文件”，才发现这个图片文件是空的。</p>
<p>那么bug就转到了前端上面去了。（啊，仔细去看报错啊，不要想当然。）</p>
<p>Google了一下发现是webuploader的固有bug。这个原因在webuploader的源代码上面也有标注。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( binary ) &#123;</span><br><span class="line">    <span class="comment">// 强制设置成 content-type 为文件流。</span></span><br><span class="line">    xhr.overrideMimeType &amp;&amp;</span><br><span class="line">            xhr.overrideMimeType(<span class="string">'application/octet-stream'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// android直接发送blob会导致服务端接收到的是空文件。</span></span><br><span class="line">    <span class="comment">// bug详情。</span></span><br><span class="line">    <span class="comment">// https://code.google.com/p/android/issues/detail?id=39882</span></span><br><span class="line">    <span class="comment">// 所以先用fileReader读取出来再通过arraybuffer的方式发送。</span></span><br><span class="line">    <span class="keyword">if</span> ( Base.os.android ) &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">        fr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            xhr.send( <span class="keyword">this</span>.result );</span><br><span class="line">            fr = fr.onload = <span class="literal">null</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        fr.readAsArrayBuffer( binary );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr.send( binary );</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr.send( formData );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bug网址<a href="https://code.google.com/p/android/issues/detail?id=39882" target="_blank" rel="external">点击这里</a>。</p>
<p>根据网上解决方法，这种情况下，只需要将sendAsBinary这个条件设定为true，就可以避免这个bug了。</p>
<blockquote>
<p>sendAsBinary {Object} [可选] [默认值：false] 是否已二进制的流的方式发送文件，这样整个上传内容php://input都为文件内容， 其他参数在$_GET数组中。</p>
</blockquote>
<p>但是这样子又诱发出另一个问题了。因为这种方式下，我们收到的文件是在post域里的，post会进行一定处理。那么究竟是处理成什么样呢。我们不清楚。</p>
<p>如果我们只是简单地用self.post()方法取出来，会发现是一个已经包装过的对象了。那样子我们就不能确认这个代码究竟还是不是正确。而且如何取出来也是一个问题。</p>
<p>由于我们用thinkjs1.x版本，于是我们唯有探进去看。在core/http.js代码里面我们发现了这么一个处理方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 普通的表单上传</span><br><span class="line"> * @return &#123;[type]&#125; [description]</span><br><span class="line"> */</span></span><br><span class="line">_commonPost: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> deferred = getDefer();</span><br><span class="line">  <span class="keyword">this</span>.req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    buffers.push(chunk);</span><br><span class="line">    length += chunk.length;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    self.http.payload = Buffer.concat(buffers).toString();</span><br><span class="line">    tag(<span class="string">'form_parse'</span>, self.http).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//默认使用querystring.parse解析</span></span><br><span class="line">      <span class="keyword">if</span> (isEmpty(self.http.post) &amp;&amp; self.http.payload) &#123;</span><br><span class="line">        self.http.post = self.filterQuery(querystring.parse(self.http.payload));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> post = self.http.post;</span><br><span class="line">      <span class="keyword">var</span> length = <span class="built_in">Object</span>.keys(post).length;</span><br><span class="line">      <span class="comment">//最大表单数超过限制</span></span><br><span class="line">      <span class="keyword">if</span> (length &gt; C(<span class="string">'post_max_fields'</span>)) &#123;</span><br><span class="line">        self.res.statusCode = <span class="number">413</span>;</span><br><span class="line">        self.http.end();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> post)&#123;</span><br><span class="line">        <span class="comment">//单个表单值长度超过限制</span></span><br><span class="line">        <span class="keyword">if</span> (post[name] &amp;&amp; post[name].length &gt; C(<span class="string">'post_max_fields_size'</span>)) &#123;</span><br><span class="line">          self.res.statusCode = <span class="number">413</span>;</span><br><span class="line">          self.http.end();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      deferred.resolve(self.http);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>我们可以看到self.http.payload是刚拼接出来的chunk，而这个chunk这个时候存在来了，且以后也没有经过querystring之类的进行处理。我们假设这个可以相信的，那我们就进行处理吧。</p>
<p>结果这个时候我们发现无论处理成binary、base64还是utf-8格式，文件都已经损坏了。而且在代码比对上我们也发现的确有所不同。</p>
<p>这个时候实在无奈了，于是就修改了一下thinkjs源码进行尝试。</p>
<p>我把处理后的代码串的长度打出来进行比对。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(length)；</span><br><span class="line"><span class="built_in">console</span>.log(Buffer.concat(buffers).length)</span><br><span class="line"><span class="built_in">console</span>.log(Buffer.concat(buffers).toString().length)</span><br></pre></td></tr></table></figure>
<p>结果发现第三个值教前两个值有所减小。于是上网查了下，发现由于编码问题，这些转码会容易造成数据丢失。</p>
<p>所以要么就是避免走过这里，要么就是更改这段代码。</p>
<p>最后还是找了老六看看有没有什么办法可以弥补。</p>
<p>最后发现thinkjs可以通过在头部打入一个标记标明上传的是文件，躲过这个处理。</p>
<blockquote>
<p> post_ajax_filename_header: ‘x-filename’, //通过ajax上传文件时文件名对应的header，如果有这个header表示是文件上传</p>
</blockquote>
<p>于是这个时候就折回去webuploader查看一下有没有方法可以修改header。</p>
<p>最后成功地发现了<a href="http://fex.baidu.com/webuploader/doc/index.html#WebUploader_Uploader_events" target="_blank" rel="external">uploadBeforeSend事件</a>。</p>
<p>于是我们通过这个事件给请求打上header，从而走到正确的文件处理上。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(type ==<span class="string">"uploadBeforeSend"</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> headers = <span class="built_in">arguments</span>[<span class="number">3</span>];</span><br><span class="line">    headers[<span class="string">"x-filename"</span>] = <span class="built_in">arguments</span>[<span class="number">2</span>].name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就此修复这个bug…………</p>
<p>花了一天…………醉了………………</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这些天用<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">webuploader</a>实现一个手机上传图片的功能。做到一半发现，在电脑上是好的，在iOS上也是好的，但是在a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[让requirejs不重复加载页面上已经存在的模块]]></title>
    <link href="http://yoursite.com/2016/03/17/requirejs-not-reload-sth/"/>
    <id>http://yoursite.com/2016/03/17/requirejs-not-reload-sth/</id>
    <published>2016-03-17T05:49:49.000Z</published>
    <updated>2016-03-17T05:58:01.412Z</updated>
    <content type="html"><![CDATA[<p>今天在业务上使用一个模块，发现模块依赖了jQuery。然后requirejs就对模块进行拉取，因为模块里的jQuery路径与我们业务上的路径不对，造成了404报错。因此我们就开始关注这个问题。</p>
<ul>
<li><strong>修改模块里的依赖路径</strong></li>
</ul>
<p>这是最直接的做法，但是这样子以后使用模块的时候也要对路径进行迁移改变。这并不怎么方便。</p>
<ul>
<li><strong>全局定义依赖别名，统一拉取</strong></li>
</ul>
<p>这是比较好的做法，因为那样子可以利用requirejs确保只拉取一次。而且基本上依赖都会统一用比较统一的别名，方便管理。</p>
<p>但是这个时候我们发现了一个小问题，因为我们页面里已经有预加载了jQuery或者Zepto之类的依赖，而这些依赖又不是使用requirejs进行加载的，这时候如果再用requirejs去进行拉取，显然造成了资源的浪费，并不是我们所需要的。</p>
<p>因此合理的做法，就是在requirejs之前作出合理的设置，如果本地已经预加载了模块就不进行加载，如果没有，就到我们本地加载。</p>
<p>因此，以jQuery为例，我们可以这么写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check for jQuery exist or not</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.jQuery) &#123;</span><br><span class="line">    <span class="comment">// load if it's not available or doesn't meet min standards</span></span><br><span class="line">    <span class="keyword">var</span> paths = &#123;&#125;;</span><br><span class="line">    paths.jquery = <span class="string">'module/jquery/dist/jquery.min'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// register the current jQuery</span></span><br><span class="line">    define(<span class="string">'jquery'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">window</span>.jQuery; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置Requirejs</span></span><br><span class="line">requirejs.config(&#123;</span><br><span class="line">    baseUrl: <span class="string">'/resource'</span>,</span><br><span class="line">    urlArgs: <span class="string">'r=&lt;%= version%&gt;'</span>,</span><br><span class="line">    paths: paths,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样子就可以解决了重复加载已加载模块的问题了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在业务上使用一个模块，发现模块依赖了jQuery。然后requirejs就对模块进行拉取，因为模块里的jQuery路径与我们业务上的路径不对，造成了404报错。因此我们就开始关注这个问题。</p>
<ul>
<li><strong>修改模块里的依赖路径</strong>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[将图片转化为ascii码字符串]]></title>
    <link href="http://yoursite.com/2016/03/16/asciiPicture/"/>
    <id>http://yoursite.com/2016/03/16/asciiPicture/</id>
    <published>2016-03-16T11:07:48.000Z</published>
    <updated>2016-03-16T12:02:53.339Z</updated>
    <content type="html"><![CDATA[<p>最近逛知乎看到了一些比较好玩的图，例如：</p>
<ul>
<li><img src="http://7xo9s8.com1.z0.glb.clouddn.com/4.jpg" alt="妈妈不要打我注释"></li>
<li><img src="http://7xo9s8.com1.z0.glb.clouddn.com/5.jpg" alt="某机智的代码串"></li>
<li><img src="http://7xo9s8.com1.z0.glb.clouddn.com/6.jpg" alt="某逆天的代码串"></li>
</ul>
<p>于是心里就想把这些东西弄出来,毕竟好玩。</p>
<p>于是想了一下，其实就是把一个图片进行灰度化，然后取出相应的值进行处理就可以了。</p>
<p>那么要对一个图片进行像素级的处理，马上就想到了神器canvas，并且canvas具有一个神器的方法，<code>getImageData()</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.clearRect(<span class="number">0</span>, <span class="number">0</span>, iWidth, iHeight);</span><br><span class="line">canvas.width = iWidth;</span><br><span class="line">canvas.height = iHeight;</span><br><span class="line">context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 设置对应的图像对象，以及它在画布上的位置</span></span><br><span class="line"><span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, iWidth, iHeight);</span><br></pre></td></tr></table></figure>
<p>这时候我们获得了一个一维的数组。数组里面是依次从左到右，从上到下的各像素的RGBA值。</p>
<p>那么这个时候我们需要通过RGB提一下灰度值，这个也很简单。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取灰度数据</span></span><br><span class="line"><span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, iWidth, iHeight);</span><br><span class="line"><span class="keyword">var</span> pixels = imageData.data;</span><br><span class="line"><span class="keyword">var</span> alevel = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pixels.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> tmp = ~ ~(pixels[i] * <span class="number">0.3</span> + pixels[i + <span class="number">1</span>] * <span class="number">0.59</span> + pixels[i + <span class="number">2</span>] * <span class="number">0.11</span>);</span><br><span class="line">	alevel.push(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后获得了灰度值后将相应的灰度值转化为对应的ascii码就好了。这里参考了一个网上的一篇<a href="http://www.zoneky.com/blog/2014/07/10/ASCII-Art-algorithms/" target="_blank" rel="external">文章</a>。建立了一个映射。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chars = [<span class="string">'@'</span>, <span class="string">'w'</span>, <span class="string">'#'</span>, <span class="string">'$'</span>, <span class="string">'k'</span>, <span class="string">'d'</span>, <span class="string">'t'</span>, <span class="string">'j'</span>, <span class="string">'i'</span>, <span class="string">'.'</span>, <span class="string">'&amp;nbsp;'</span>];</span><br><span class="line"><span class="keyword">var</span> step = <span class="number">25</span>,map = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> index = ~ ~(i / <span class="number">25</span>);</span><br><span class="line">	map[i] = chars[index];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> map;</span><br></pre></td></tr></table></figure>
<p>根据灰度值直接取映射就好。那么这时候其实已经完成了图像的转换。但是我们有的时候需要的图片不需要那么大。我们需要提取一下，增大一下粒度。<a href="http://www.zoneky.com/blog/2014/07/10/ASCII-Art-algorithms/" target="_blank" rel="external">文章</a>里面采用的是不断地在canvas上面进行操作，取出所需要的值。不过我有点不大想用这种做法。所以我采取了普通的数组计算方法。</p>
<p>为了容易编写，我将一维数组转化为二维数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._liftDimension = <span class="function"><span class="keyword">function</span> (<span class="params">arr, width</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> ret = [];</span><br><span class="line">	<span class="keyword">var</span> row = -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i % width == <span class="number">0</span>) &#123;</span><br><span class="line">			row++;</span><br><span class="line">          ret.push([]);</span><br><span class="line">	&#125;</span><br><span class="line">	ret[row].push(arr[i]);&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后再在二维数组上面进行粒子化操作，无非就是按照粒子宽度，取出一个正方形数据进行处理。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._particlize = <span class="function"><span class="keyword">function</span> (<span class="params">arr, parlen, width, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newOne = [];</span><br><span class="line">  <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  arr = _this._liftDimension(arr, width);</span><br><span class="line">  startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> row = <span class="number">0</span>; row &lt; arr.length; row += parlen) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> col = <span class="number">0</span>; col &lt; arr[row].length; col += parlen) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; parlen; r++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; parlen; c++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (arr[row + r]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[row + r][col + c]) &#123;</span><br><span class="line">              tmp.push(arr[row + r][col + c]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tmp.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        newOne.push(map[~ ~_this._getParticle(tmp)]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    newOne.push(<span class="string">"\r\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newOne;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>而粒子计算也只是取出个数组的平均值就好了。</p>
<p>于是按照这个算法，就可以ascii码化图片了。</p>
<p>例如：</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/1.jpg" alt="原图"></p>
<p>转化成（粒度为5）</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/7.jpg" alt="字符化"></p>
<p><a href="http://wechat.toxicjohann.com/home/index/ascii" target="_blank" rel="external">点击这里体验</a></p>
<p><a href="https://github.com/toxic-johann/asciiPic" target="_blank" rel="external">点击这里</a>进入github观看源码</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近逛知乎看到了一些比较好玩的图，例如：</p>
<ul>
<li><img src="http://7xo9s8.com1.z0.glb.clouddn.com/4.jpg" alt="妈妈不要打我注释"></li>
<li><img src="http://7xo9s8]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[gulp-watch不能监听添加文件]]></title>
    <link href="http://yoursite.com/2016/02/27/gulp-add-watch-bug/"/>
    <id>http://yoursite.com/2016/02/27/gulp-add-watch-bug/</id>
    <published>2016-02-27T12:59:20.000Z</published>
    <updated>2016-03-01T11:22:31.566Z</updated>
    <content type="html"><![CDATA[<p>这篇文章主要记录下今天做的时候遇到的几个问题。</p>
<h1 id="gulp-watch">gulp-watch</h1><p>第一个问题当然是gulp-watch这个坑。其实这个坑有了很久，大家也很想gulp可以修复这个东西，但是gulp上面已经声明了，<a href="https://github.com/gulpjs/gulp/issues/651" target="_blank" rel="external">这个不是他们的bug</a>。虽然尽力在修，但是不知道什么时候弄得好。</p>
<p>网上也有<a href="http://stackoverflow.com/questions/22391527/gulps-gulp-watch-not-triggered-for-new-or-deleted-files" target="_blank" rel="external">另外的解决办法</a>，或者直接调用gaze，但是我试了试貌似不行。</p>
<p>所以最后我放弃了，毕竟gulp是拿来监听文件的，不是监听文件夹的。所以我把我的需求变了变，让服务器调用gulp。</p>
<p>这个其实还是很简单的，调用一下exec就好了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">'cd ./myblog;gulp markdown;'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> self.success()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里再次更新一下<del>~</del>~</p>
<p>—————————————-我是分割线———————————————</p>
<p>后来当天回去想了想，觉得这种实现方式实在欠缺优雅。于是我就上网搜了一下node用于监听文件或文件夹变化的组件，最终决定了采用<a href="https://github.com/paulmillr/chokidar" target="_blank" rel="external">chokidar</a>这个模块。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chokidar = <span class="built_in">require</span>(<span class="string">'chokidar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// One-liner for current directory, ignores .dotfiles</span></span><br><span class="line">chokidar.watch(<span class="string">'.'</span>, &#123;ignored: <span class="regexp">/[\/\\]\./</span>&#125;).on(<span class="string">'all'</span>, (event, path) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event, path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>就这么简单些，就可以监听目前的模块了。然后稍加改变就可以监听模块的改变。</p>
<p>然后就遇到了一个问题。每次模块改变我都触发一个gulp的task，但是如果模块改变的太快，就很可能会在task尚未结束的时候再次启动。这种情况gulp是处理不了的。</p>
<p>所以我就写了一个漏斗来进行逐一处理。</p>
<p>这里顺便提一下，因为涉及到promise的使用，所以我是用了gulp的babel模式，在gulp3.9.0以上会支持。</p>
<p>这里是引自该<a href="https://segmentfault.com/a/1190000004136053" target="_blank" rel="external">博文</a></p>
<blockquote>
<p>首先检测一下版本:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp -v</span><br></pre></td></tr></table></figure>
<p>版本如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLI version <span class="number">3.9</span>.<span class="number">0</span></span><br><span class="line">Local version <span class="number">3.9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>如果版本过低可以这么升级</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g &amp;&amp; npm install gulp --save-dev</span><br></pre></td></tr></table></figure>
<p>安装babel-loader</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>
<p>重点主要是更换命名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv gulpfile.js gulpfile.babel.js</span><br></pre></td></tr></table></figure>
</blockquote>
<p>OK，下面谈谈我的漏斗，漏斗的设计理念其实也还是比较简单的。</p>
<ol>
<li>漏斗本身是一个数组，每次只处理数组中的第一个数，处理完后取出第一个数，如果数组中仍有数，处理下一个数。</li>
<li>漏斗处理的时候，会加锁，但是加锁的时候可以继续添加数，仅仅不能调用处理函数。</li>
<li>应该可以有多个漏斗存在。</li>
</ol>
<p>所以我才用了工厂模型。</p>
<p>首先定义一下内部属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Funnel</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 定义内部属性</span></span><br><span class="line">	<span class="keyword">this</span>.pool = [];</span><br><span class="line">	<span class="keyword">this</span>.lock = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后定义一个_push函数，仅仅用于为pool添加内容，应该可以支持多个数组添加。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">	<span class="keyword">this</span>.pool = <span class="keyword">this</span>.pool.concat(args);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其次定义一个_through函数，用于流通数据，执行函数。此处我才用了promise.</p>
<p>如果被锁或者没数据，不进行处理。否则，加锁，然后进行处理，再解锁。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._through = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.lock || <span class="keyword">this</span>.pool.length == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.lock = <span class="literal">true</span>;</span><br><span class="line">	func(<span class="keyword">this</span>.pool[<span class="number">0</span>]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		self._unlock(func)</span><br><span class="line">	&#125;)	</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>最后定义一个_unlock函数，用于解锁、取出数据和检测是否需要继续流通。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._unlock = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pool.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">this</span>.lock = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.pool.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">this</span>._through(func)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>所以最后得到文件Funnel.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Funnel</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 定义内部属性</span></span><br><span class="line">	<span class="keyword">this</span>.pool = [];</span><br><span class="line">	<span class="keyword">this</span>.lock = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义外部方法</span></span><br><span class="line">	<span class="keyword">this</span>._push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">		<span class="keyword">this</span>.pool = <span class="keyword">this</span>.pool.concat(args);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>._through = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.lock || <span class="keyword">this</span>.pool.length == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.lock = <span class="literal">true</span>;</span><br><span class="line">		func(<span class="keyword">this</span>.pool[<span class="number">0</span>]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			self._unlock(func)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>._unlock = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pool.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">this</span>.lock = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.pool.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>._through(func)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Funnel;</span><br></pre></td></tr></table></figure>
<p>然后运用也很简单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> funnel = <span class="keyword">new</span> Funnel();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    funnel._push(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">    funnel._through(<span class="function"><span class="keyword">function</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"test"</span>,test);</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)     </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>新建一个漏斗，推入数据，然后处理即可。</p>
<h1 id="fs-mkdir">fs.mkdir</h1><p>第二个问题是利用生成路径问题。</p>
<p>众所周知，fs.write之类的必须基于已有路径，但是有的时候不一定有，所以我们可以写个函数做个判断。</p>
<p>以前我会这么写</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建所有目录</span></span><br><span class="line"><span class="keyword">var</span> mkdirs = <span class="built_in">module</span>.exports.mkdirs = <span class="function"><span class="keyword">function</span>(<span class="params">dirpath, mode, callback</span>) </span>&#123;</span><br><span class="line">    fs.exists(dirpath, <span class="function"><span class="keyword">function</span>(<span class="params">exists</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exists) &#123;</span><br><span class="line">           callback(dirpath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//尝试创建父目录，然后再创建当前目录</span></span><br><span class="line">            mkdirs(path.dirname(dirpath), mode, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 fs.mkdir(dirpath, mode, callback);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>不过现在我想写成promise可以用，所以我这么写</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mkdir:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dirpath, mode, callback</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">let</span> acallback = (<span class="function"><span class="keyword">function</span>(<span class="params">dirpath</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">						<span class="keyword">if</span>(think.isFunction(callback))&#123;</span><br><span class="line">							callback(dirpath);</span><br><span class="line">						&#125;</span><br><span class="line">						resolve(dirpath);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)(dirpath);</span><br><span class="line">				fs.exists(dirpath, <span class="function"><span class="keyword">function</span>(<span class="params">exists</span>) </span>&#123;</span><br><span class="line">			        <span class="keyword">if</span>(exists) &#123;</span><br><span class="line">			            acallback(dirpath);</span><br><span class="line">			        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			            self.mkdir(path.dirname(dirpath), mode, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			                fs.mkdir(dirpath, mode, acallback);</span><br><span class="line">			            &#125;);</span><br><span class="line">			        &#125;</span><br><span class="line">			    &#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;.apply(global.utils,<span class="built_in">arguments</span>)</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>
<p>我在里面创造了promise并且在callback添加了resolve，从而达到目的。</p>
<p>其实还是有其它方式的，例如你在那个传入的callbak里面绑定一个resolve之类的。不过我主要是懒得做，以后想这么用而已。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章主要记录下今天做的时候遇到的几个问题。</p>
<h1 id="gulp-watch">gulp-watch</h1><p>第一个问题当然是gulp-watch这个坑。其实这个坑有了很久，大家也很想gulp可以修复这个东西，但是gulp上面已经声明了，<a href]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[新形状组件和最近的一些笔记]]></title>
    <link href="http://yoursite.com/2016/02/24/new-shape-and-webpack/"/>
    <id>http://yoursite.com/2016/02/24/new-shape-and-webpack/</id>
    <published>2016-02-24T03:46:31.000Z</published>
    <updated>2016-02-24T03:59:24.773Z</updated>
    <content type="html"><![CDATA[<p>如果你还记得我之前做的一个关于svg插件处理的话，你应该记得我是直接在代码里把颜色元素去掉，然后通过css打上各种颜色。</p>
<p>然后随着业务的增加，我们需要支持多种颜色的svg。</p>
<p>那么这种情况我们当然就不能简单的颜色处理了。于是很简单的我用attribute判断不同的颜色，然后为之打上不同的颜色。</p>
<p>那么其实主要问题就是如何区分咯。我采用了一个很简单的方法。因为我在后台需要转换数据，为了偷懒，我直接在后台用cheerio处理文件。当然在前端也能达成这种效果。只需要用filereaded来读取上传的文件就可以了。</p>
<p>处理的流程如下，</p>
<ol>
<li>遍历所有可以加上颜色的元素，提取颜色，打上颜色标签。</li>
<li>将提取的颜色除重</li>
<li>根据颜色标签替换为自己需要的标签，根据这些标签进行颜色处理。</li>
</ol>
<p>所以难度不大。不过在novajs上面template-repeat绑定元素监听不怎么可行，所以要自己加个代理监听。总体来说还是达成了效果。</p>
<p>另外最近在自己的一个项目里尝试使用了webpack，发现babel-loader没有生效，查明后发现是babel6采用了插件处理。配置上必须改成如下，添加preset</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">test</span>: /\.js$/,</span><br><span class="line">              exclude: /(node_modules|bower_components)/,</span><br><span class="line">              loader: <span class="string">'babel'</span>,</span><br><span class="line">              query: &#123;</span><br><span class="line">                    presets: [<span class="string">'es2015'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你还记得我之前做的一个关于svg插件处理的话，你应该记得我是直接在代码里把颜色元素去掉，然后通过css打上各种颜色。</p>
<p>然后随着业务的增加，我们需要支持多种颜色的svg。</p>
<p>那么这种情况我们当然就不能简单的颜色处理了。于是很简单的我用attrib]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[三门问题]]></title>
    <link href="http://yoursite.com/2016/02/07/talk-about-three-door/"/>
    <id>http://yoursite.com/2016/02/07/talk-about-three-door/</id>
    <published>2016-02-07T07:30:22.000Z</published>
    <updated>2016-02-07T08:39:10.009Z</updated>
    <content type="html"><![CDATA[<p>昨天和同学外出叙旧，喝得比较醉。然后看到了一个帖子说到三门问题。</p>
<p>三门问题是一个挺有趣的问题，其实我昨天已经说了一些关键点，不过今天还是来这里进行详细的讨论。</p>
<p>我的问题描述摘自<a href="http://baike.baidu.com/view/68669.htm" target="_blank" rel="external">百度百科</a></p>
<blockquote>
<p>「假设你正在参加一个游戏节目，你被要求在三扇门中选择一扇：其中一扇后面有一辆车；其余两扇后面则是山羊。你选择了一道门，假设是一号门，然后知道门后面有什么的主持人，开启了另一扇后面有山羊的门，假设是三号门。他然后问你：“你想选择二号门吗？”转换你的选择对你来说是一种优势吗？」</p>
</blockquote>
<p>首先，让我们作一个最简单的假设。你只是从三扇门上面选择，选择就开给你看。那么你选中车的几率是1/3。</p>
<p>接下来，我们再作另一个假设，你从三扇门里面选择，主持人打开一扇门，门后是羊，而你不改选，你选中车的几率依旧是1/3。</p>
<p>这个结果还是很好理解的，因为无论主持人做了什么，对你的选择没有任何影响。</p>
<p>OK，接下来才是最大的问题，如果你改选呢。</p>
<p>我们只讨论改选下你选中的概率。</p>
<p>你选中了1号门，现已知3号门为羊，那2号门后面会是什么？</p>
<p>如果一号门后面是车，则二号门后面为羊。</p>
<p>如果一号门后面是羊，二号门后面则为车。</p>
<p>所以二号门为车的几率，即为一号门为羊的几率。</p>
<p>所以此时，如果你改选二号门，你获得车的几率为2/3。显然改选更有利。</p>
<p>为什么会产生这种奇怪的变化呢？因为概率是依据实际条件得出的，而此时一号门和二号门之间选择的条件已经明显改变了。</p>
<p>就这样而已。。。</p>
<p>如果这样子，我们也不能理解的话，我们只需要作一个简单的穷举.</p>
<p>穷举就是要了解到出现这种情况的时候你有多少选择。</p>
<p>标记三个门分别为d1，d2，d3，三个物件为c0,g1,g2则对应列表如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n d1 d2 d3</span><br><span class="line">----------</span><br><span class="line"><span class="number">1</span> c0 g1 g2</span><br><span class="line"><span class="number">2</span> c0 g2 g1</span><br><span class="line"><span class="number">3</span> g1 c0 g2</span><br><span class="line"><span class="number">4</span> g2 c0 g1</span><br><span class="line"><span class="number">5</span> g1 g2 c0</span><br><span class="line"><span class="number">6</span> g2 g1 c0</span><br></pre></td></tr></table></figure>
<p>针对这六种可能性，都是1/6。</p>
<p>现在我们模拟问题的现场，若你选择d1,而主持人打开的门是d3的几率分别如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n d1 d2 d3 openD3</span><br><span class="line">-----------------</span><br><span class="line"><span class="number">1</span> c0 g1 g2  <span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2</span> c0 g2 g1  <span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">3</span> g1 c0 g2   <span class="number">1</span></span><br><span class="line"><span class="number">4</span> g2 c0 g1   <span class="number">1</span></span><br><span class="line"><span class="number">5</span> g1 g2 c0   <span class="number">0</span></span><br><span class="line"><span class="number">6</span> g2 g1 c0   <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>理解这一步还是挺关键的。</p>
<p>在1,2情况下，因为主持人无论打开二号门，三号门，都能是羊，所以主持人选择三号门的几率是1/2。</p>
<p>在3,4情况下，主持没有其他选择，必须打开三号门，所以出现的几率是1。</p>
<p>在5,6情况下，主持人没有任何可能打开三号门，所以这个事件出现的几率为0。</p>
<p>那么我们现在反推，因为我们已知这个事件发生了，所以这种情况下，门后面的的分布可能则变为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n d1 d2 d3 </span><br><span class="line">-----------</span><br><span class="line"><span class="number">1</span> c0 g1 g2  </span><br><span class="line"><span class="number">2</span> c0 g2 g1 </span><br><span class="line"><span class="number">3</span> g1 c0 g2</span><br><span class="line"><span class="number">4</span> g1 c0 g2</span><br><span class="line"><span class="number">5</span> g2 c0 g1</span><br><span class="line"><span class="number">6</span> g2 c0 g1</span><br></pre></td></tr></table></figure>
<p>由穷举法可知，换门的成功率为2/3。</p>
<p>所以，这就是这个问题的解决办法了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天和同学外出叙旧，喝得比较醉。然后看到了一个帖子说到三门问题。</p>
<p>三门问题是一个挺有趣的问题，其实我昨天已经说了一些关键点，不过今天还是来这里进行详细的讨论。</p>
<p>我的问题描述摘自<a href="http://baike.baidu.com/vie]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[thinkjs2.1上面node-crontab使用的坑和降频器]]></title>
    <link href="http://yoursite.com/2016/02/05/sth-about-node-crontab/"/>
    <id>http://yoursite.com/2016/02/05/sth-about-node-crontab/</id>
    <published>2016-02-05T09:07:59.000Z</published>
    <updated>2016-02-05T09:19:55.482Z</updated>
    <content type="html"><![CDATA[<p>因为要做一些定时任务的功能，所以我在thinkjs上面使用了node-crontab模块。但是很快我发现了一个问题。每次自动编译，node-crontab都会将这个函数绑定一次。然后进行运行。</p>
<p>一开始的想法是绑定一个降频器，然后让函数运行的时候，确保只在短时间内运行一次。</p>
<p>后来发现，每次生成定时任务都会生成一个新的函数，降频器也变成了很多个。明显是不能用了。到最后才发现自己发了这个傻。</p>
<p>于是，我直接获取到任务的id，将它缓存在global上面，如果发现他有值，则清除之。解决了这个问题。代码如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 及时取消原有的定时任务</span><br><span class="line"><span class="keyword">if</span>(global.getTokenId)&#123;</span><br><span class="line">	crontab.cancelJob(global.getTokenId);</span><br><span class="line">&#125;</span><br><span class="line">global.getTokenId = crontab.scheduleJob(<span class="string">"0 15 * * * *"</span>,()=&gt;&#123;</span><br><span class="line">	regularGetToken()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个bug仅仅是记录一下。下面我们来谈谈降频器。</p>
<p>降频器的话就是希望函数不被高频触发，在做动画的时候我们经常用到requestAnimaitonFrame这个方法就是用于解决这个问题。无论什么任务，都等到下次重绘的时候触发，明显降低了很多频率。</p>
<p>然而在后台编写的代码的时候，就没有这个函数鸟。那么也很简单，我们用setTimeout做一个。</p>
<p>这里我们先看一下网上流传的比较广的deboucer代码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_.debounce = <span class="keyword">function</span>(func, <span class="built_in">wait</span>, immediate) &#123;</span><br><span class="line">	var timeout;</span><br><span class="line">	<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">		var context = this, args = arguments;</span><br><span class="line">		var later = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">			timeout = null;</span><br><span class="line">			<span class="keyword">if</span> (!immediate) func.apply(context, args);</span><br><span class="line">		&#125;;</span><br><span class="line">		var callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">		clearTimeout(timeout);</span><br><span class="line">		timeout = <span class="built_in">set</span>Timeout(later, <span class="built_in">wait</span>);</span><br><span class="line">		<span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这段代码的确可以降低频率，但是如果你一直不断调用目标函数，那么因为这个降频的原因，会永远不可能触发。因为我们会不断把setTimeout给清除掉。</p>
<p>我的想法是，比如在间隔时间内，有N次函数调用，而只有第一个函数会被调用成功，后面的调用我都将他们废弃。间隔结束后，再一次的函数调用被触发。</p>
<p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">preventMultyCalls = <span class="keyword">function</span> (func,duration) &#123;</span><br><span class="line">		<span class="built_in">let</span> timeout;</span><br><span class="line">		<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">			<span class="keyword">if</span>(!timeout)&#123;</span><br><span class="line">				func.apply(this,arguments);</span><br><span class="line">				timeout = <span class="built_in">set</span>Timeout(()=&gt;&#123;</span><br><span class="line">					timeout = null;</span><br><span class="line">				&#125;,duration);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就达到了我的效果了。觉得做这些小的工具函数还是挺好玩的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为要做一些定时任务的功能，所以我在thinkjs上面使用了node-crontab模块。但是很快我发现了一个问题。每次自动编译，node-crontab都会将这个函数绑定一次。然后进行运行。</p>
<p>一开始的想法是绑定一个降频器，然后让函数运行的时候，确保只在短时间]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近的一些技巧记录]]></title>
    <link href="http://yoursite.com/2016/02/05/sth-about-formdata-and-promise/"/>
    <id>http://yoursite.com/2016/02/05/sth-about-formdata-and-promise/</id>
    <published>2016-02-05T03:09:36.000Z</published>
    <updated>2016-02-05T03:35:42.039Z</updated>
    <content type="html"><![CDATA[<p>这篇文章主要是记录一下自己一些常忘掉的点，和最近的一些总结。</p>
<h1 id="formData">formData</h1><p>formData是一个新增的html5方法，而且在中国的支持度还算可以。大概有83%。不过你要支持IE10之前的产品，那就另当别论了。</p>
<p>其实这个方法我以前已经多次用过了，但是老是会因为时间隔得长所以忘掉了，这里记录一下，让自己记得比较清楚一点。</p>
<p>formData的简洁之处在于他可以根据form随时生成可以上传的formData文件，而且也可以自己去append之类的，一般情况下，也不大用得着。但是如果涉及文件上传的话，还是十分方便的。</p>
<p>简单举个栗子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form class=<span class="string">"upload-terms-form"</span>&gt;</span><br><span class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"file"</span> name=<span class="string">"terms"</span> value=<span class="string">"文件选择"</span>&gt;</span><br><span class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>有文件上传表单如上，如果我们不想让页面刷新而直接上传文件呢。那么我们一般会监听submit，然后用ajax的方法进行上传，并且在末尾取消默认的事件。</p>
<p>所以难点在于怎么去ajax一个文件，以往jQuery有许多插件做这个事，但是现在有HTML5的formData属性，做起来还是十分方便。直接用form生成一个formData即可上传。</p>
<p>代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 绑定form，并且监听submit事件</span><br><span class="line">$(document).delegate(<span class="string">"form.upload-terms-form"</span>,<span class="string">"submit"</span>,<span class="keyword">function</span>(evt)&#123;</span><br><span class="line">	$.ajax( &#123;</span><br><span class="line">		url: <span class="string">'some url you want to go'</span>,</span><br><span class="line">	   <span class="built_in">type</span>: <span class="string">'POST'</span>,</span><br><span class="line">	   data: new FormData( this ),//从form上面新建一个formData</span><br><span class="line">	   processData: <span class="literal">false</span>,</span><br><span class="line">	   contentType: <span class="literal">false</span>,</span><br><span class="line">	   success:(response)=&gt;&#123;</span><br><span class="line">	   		// 成功的时候的响应</span><br><span class="line">	   &#125;,</span><br><span class="line">	   beforeSend:()=&gt;&#123;</span><br><span class="line">	    	// 上传前要做些什么，比如可以增加一个上传状态或者进度条</span><br><span class="line">	   &#125;,</span><br><span class="line">	   error:()=&gt;&#123;</span><br><span class="line">	   		// 上传失败的响应</span><br><span class="line">	   &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    evt.preventDefault();//禁止掉原生的submit事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>总而言之，这个方法还是比较常用并且比较简单地。</p>
<h1 id="函数式编程小结——结合map和promise-all简化多个请求流程">函数式编程小结——结合map和promise.all简化多个请求流程</h1><p>这一段读起来可能有点扯，但是也是纠正我以前一个不好的习惯。</p>
<p>不知道你有没有这么一种场景，就是你多个数据，他们要调用异步的方法进行处理，处理完毕后你需要返回出去。那么这个我以前是怎么写的呢？</p>
<p>还是比较简单地，我们只需要增加一个变量进行记录就好了。请看代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line">var count = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="keyword">function</span>(number)&#123;</span><br><span class="line">	handle(number,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		// i am a callback <span class="keyword">function</span></span><br><span class="line">		count++;</span><br><span class="line">		<span class="keyword">if</span>(count == data.length)&#123;</span><br><span class="line">			console.log(<span class="string">"success"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这种代码的问题首先是，不能知道部分失败的，因为如果你失败的也不增加这个变量，你不会返回一个成功的结果。</p>
<p>第二个是可读性差，理解得不好，如果要增加各种监听写起来也不方便。</p>
<p>然而现在我们有promise函数了。promise.all可以很好地处理这种并发异步的问题，让你知道成功还是部分失败。失败的点在哪里。所以我们可以生成一个函数集让他去进行处理。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">//生成一个处理列表</span><br><span class="line"><span class="built_in">let</span> tasks = data.map(number=&gt;&#123;</span><br><span class="line">	<span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">		//可以分别进行成功和失败返回的处理</span><br><span class="line">		promiseHandle(number).then(success=&gt;&#123;</span><br><span class="line">			resolve();</span><br><span class="line">		&#125;,fail=&gt;&#123;</span><br><span class="line">			reject(number);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Promise.all(tasks).then(success=&gt;&#123;</span><br><span class="line">	console.log(<span class="string">"success"</span>);</span><br><span class="line">	//全部成功后的处理</span><br><span class="line">&#125;,fail=&gt;&#123;</span><br><span class="line">	console.log(<span class="string">"fail at "</span>,fail);</span><br><span class="line">	//可以知晓哪个部分是失败的</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>用这个小技巧，可以令我们的代码更加可读和易于处理。</p>
<p>然后为什么说是函数式编程呢。</p>
<p>因为这里我们将处理过程抽取了出来，然后返回一个处理的东西用于执行。</p>
<p>我觉得比以前过程式好，也便于修改。啊哈哈哈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章主要是记录一下自己一些常忘掉的点，和最近的一些总结。</p>
<h1 id="formData">formData</h1><p>formData是一个新增的html5方法，而且在中国的支持度还算可以。大概有83%。不过你要支持IE10之前的产品，那就另当别论了。<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[课堂总结——函数式编程菜鸟式试探]]></title>
    <link href="http://yoursite.com/2016/01/23/function-program-exam-one/"/>
    <id>http://yoursite.com/2016/01/23/function-program-exam-one/</id>
    <published>2016-01-23T13:42:50.000Z</published>
    <updated>2016-01-23T16:39:57.115Z</updated>
    <content type="html"><![CDATA[<p>为期两周的课程已经结束了，其中月影长达10小时的课程还是价值连城的。</p>
<p>月影在课堂上十分注重一个概念，就是函数式编程。那么什么是函数式编程呢？为什么需要函数式编程呢？函数式编程好不好呢？这些问题，每个人都有自己的答案，就像每个人都会有属于自己的设计模式，无需要强行去争论。</p>
<p>于是今天开始去研究这个问题。现在写下来，总结一下自己的理解，希望大家能够指正。</p>
<h2 id="为什么我的代码出错了">为什么我的代码出错了</h2><p>JavaScript有一个十分著名的的概念，叫做<a href="http://www.75team.com/archives/589" target="_blank" rel="external">回调地狱</a>。就是形容一个函数中嵌入了太多的回调函数，令到函数十分难以理解。</p>
<p>于是大家提出了好多种方法去解决这个问题，并且也诞生了诸如promise这种优秀的策略。但是为什么会有这种策略呢，这种策略的优秀点何在呢？他用了什么方法呢。</p>
<p>我们先看一个面试题。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var User=&#123;</span><br><span class="line">	count:<span class="number">1</span>,</span><br><span class="line">	getCount:<span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> this.count&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(User.getCount());//<span class="number">1</span></span><br><span class="line">var func = User.getCount;</span><br><span class="line">console.log(func());//undefined</span><br></pre></td></tr></table></figure>
<p>这种原因是因为，<code>func=User.getCount</code>只是简单的移交了函数，而func执行的时候，this指向的是window,即console.log所在的对象。</p>
<p>那么这种问题怎么解决呢？有好几种方式的，第一就是如上面第一个做法那样，不要把名字换了，调用整个函数。</p>
<p>但是如果函数之前的对象十分长呢？我们这样运行起来十分不方便，我就是想让代码短一点呢。</p>
<p>这种情况下，我们可以用bind</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var func =  User.getCount.bind(User);</span><br></pre></td></tr></table></figure>
<p>又或者在一些老一点的浏览器上，没有bind，我们可以这么写。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.bind = Function.protyotype.bind || <span class="keyword">function</span>(context)&#123;</span><br><span class="line">	var self=this</span><br><span class="line">	<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> self.apply(context,arguments);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们就可以创造一个bind了。然后我们可以看到这个函数十分特别，因为他返回了一个函数。我们先记下这个特点。</p>
<p>这个时候我们就会想，我每次都要自己去bind这不很麻烦，可不可以在函数体内自身就bind好，我调用的时候不用想这些问题。</p>
<p>这个当然也是可以的啦。我们用apply来举个例子。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var User=&#123;</span><br><span class="line">	count:<span class="number">1</span>,</span><br><span class="line">	getCount:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">			<span class="built_in">return</span> this.count;</span><br><span class="line">		&#125;.apply(User,arguments);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">var func = User.getCount;</span><br><span class="line">console.log(func());//<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到，getCount也是返回了一个函数。所以返回函数的优点在哪里？</p>
<p>首先，我们可以看到，我们可以通过这种方式指定上下文，让我们在使用的时候无需担心this的问题。</p>
<h2 id="我们的一些坏思想">我们的一些坏思想</h2><p>假设我们业务线上有这么个需求，我们需要增加一个相加的函数，于是我们很快就写了出来了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> add(x,y)&#123;</span><br><span class="line">	<span class="built_in">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>某一天我们增加了需求，要累加。于是我们这么写。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">addMore</span></span>()&#123;</span><br><span class="line">	var args = [].slice.call(arguments);</span><br><span class="line">	var tmp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(var i = <span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">		tmp = tmp + args[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现，我们并没有复用add。这让我们做了些多余的事情。于是我们将它复用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">addMore2</span></span>()&#123;</span><br><span class="line">	var args = [].slice.call(arguments);</span><br><span class="line">	var tmp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(var i = <span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">		tmp = add(tmp,args[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一天我们发现，我们要做一个累乘，我们发现累乘和累加原则上是相同的，但是我们没有办法复用累加这种模式。所以，我们要曾加一种累*的方法。这很明显，就是要求我们为创造一个服务于函数的函数。我们发现，当业务放大到一定程度的时候，我们需要复用的是一套模式，一套方法。所以我们需要将方法抽取出来。我们可以这么写。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> add(x,y)&#123;</span><br><span class="line">	<span class="built_in">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> time(x,y)&#123;</span><br><span class="line">	<span class="built_in">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> concat(x,y)&#123;</span><br><span class="line">	<span class="built_in">return</span> x.toString()+y.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> myReduce(func)&#123;</span><br><span class="line">	<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		var args = [].slice.call(arguments);</span><br><span class="line">		var tmp=args[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(var i=<span class="number">1</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">			tmp = func(tmp,args[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">var addMore = myReduce(add);</span><br><span class="line">var timeMore = myReduce(time);</span><br><span class="line">var concatMore = myReduce(concat);</span><br><span class="line">console.log(addMore(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));//<span class="number">10</span></span><br><span class="line">console.log(timeMore(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));//<span class="number">24</span></span><br><span class="line">console.log(concatMore(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));//<span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到这就实现了复用，这个myReduce就是和ES5中十分有用的reduce函数十分相似。我们可以通过这种方式创造新函数，增加复用性。</p>
<p>就像月影在课堂上说的，相对于数据，方法永远少的多和固定的多。如果我们可以将他抽取出来并且进行使用，毫无疑问，我们可以省下十分多的体力。</p>
<h2 id="让程序语言更加可读">让程序语言更加可读</h2><p>这一段主要来自于对阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="external">《函数式编程初探》</a>的研究。</p>
<p>里面举了这么一个例子。</p>
<p>我们平常编写数学运算，我们这么写</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>+<span class="number">2</span>）*<span class="number">3</span>/<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>在程序里，我们这么写</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">var b = a * <span class="number">3</span>;</span><br><span class="line">var c = b / <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<p>如果我们设计了函数，我们这么写</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x,y)</span></span>&#123;<span class="keyword">return</span> x+y);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">time</span><span class="params">(x,y)</span></span>&#123;<span class="keyword">return</span> x*y);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">except</span><span class="params">(x,y)</span></span>&#123;<span class="keyword">return</span> x/y);</span><br><span class="line">except(time(add(<span class="number">1</span>,<span class="number">2</span>),<span class="number">3</span>),<span class="number">4</span>);<span class="comment">//2.25</span></span><br></pre></td></tr></table></figure>
<p>其实这种时候已经比较接近自然语言了，我们只要再增加一下链式调用，就可以实现更加人性化的语言了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var myMath = &#123;</span><br><span class="line">	answer:<span class="number">0</span>,</span><br><span class="line">	add:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		var args = [].slice.call(arguments);</span><br><span class="line">		<span class="keyword">if</span>(args.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			this.answer = args[<span class="number">0</span>]+args[<span class="number">1</span>];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			this.answer+=args[<span class="number">0</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> this;</span><br><span class="line">	&#125;,</span><br><span class="line">	time:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		var args = [].slice.call(arguments);</span><br><span class="line">		<span class="keyword">if</span>(args.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			this.answer = args[<span class="number">0</span>]*args[<span class="number">1</span>];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			this.answer*=args[<span class="number">0</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> this;</span><br><span class="line">	&#125;,</span><br><span class="line">	except:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		var args = [].slice.call(arguments);</span><br><span class="line">		<span class="keyword">if</span>(args.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			this.answer = args[<span class="number">0</span>]/args[<span class="number">1</span>];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			this.answer/=args[<span class="number">0</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> this;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(myMath.add(<span class="number">1</span>,<span class="number">2</span>).time(<span class="number">3</span>).except(<span class="number">4</span>).answer);//<span class="number">2.25</span></span><br></pre></td></tr></table></figure>
<p>为了偷懒，我们再抽取一部分。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">var myMath = &#123;</span><br><span class="line">	answer:<span class="number">0</span>,</span><br><span class="line">	myPromise:<span class="keyword">function</span>(func)&#123;</span><br><span class="line">		var self = this;</span><br><span class="line">		<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">			<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">				self.answer =  func.apply(this,arguments);</span><br><span class="line">				<span class="built_in">return</span> self;</span><br><span class="line">			&#125;.apply(myMath,arguments);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	myThen:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		var self=this;</span><br><span class="line">		var args = [].slice.call(arguments);</span><br><span class="line">		var func = args[<span class="number">0</span>];</span><br><span class="line">		args.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">			var args = [].slice.call(arguments);</span><br><span class="line">			args.unshift(this.answer);</span><br><span class="line">			func.apply(self,args);</span><br><span class="line">			<span class="built_in">return</span> self;</span><br><span class="line">		&#125;.apply(myMath,args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">	var args = [].slice.call(arguments);</span><br><span class="line">	<span class="built_in">return</span> args[<span class="number">0</span>]+args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">time</span></span>()&#123;</span><br><span class="line">	var args = [].slice.call(arguments);</span><br><span class="line">	<span class="built_in">return</span> args[<span class="number">0</span>]*args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">except</span></span>()&#123;</span><br><span class="line">	var args = [].slice.call(arguments);</span><br><span class="line">	<span class="built_in">return</span> args[<span class="number">0</span>]/args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ad = myMath.myPromise(add);</span><br><span class="line">ti = myMath.myPromise(time);</span><br><span class="line">ex = myMath.myPromise(except);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(ad(<span class="number">0</span>,<span class="number">1</span>).myThen(ad,<span class="number">2</span>).myThen(ti,<span class="number">3</span>).myThen(ex,<span class="number">4</span>).answer);//<span class="number">2.25</span></span><br></pre></td></tr></table></figure>
<p>于是，我们就可以拿到一个更加贴近我们需要的运算函数了。</p>
<p>好吧，我的理解大概就是这样子，感觉还是挺好玩的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为期两周的课程已经结束了，其中月影长达10小时的课程还是价值连城的。</p>
<p>月影在课堂上十分注重一个概念，就是函数式编程。那么什么是函数式编程呢？为什么需要函数式编程呢？函数式编程好不好呢？这些问题，每个人都有自己的答案，就像每个人都会有属于自己的设计模式，无需要强]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信页面内嵌视频的一些心得]]></title>
    <link href="http://yoursite.com/2016/01/09/sth-about-video/"/>
    <id>http://yoursite.com/2016/01/09/sth-about-video/</id>
    <published>2016-01-09T03:53:21.000Z</published>
    <updated>2016-01-09T05:28:40.132Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么使用视频">为什么使用视频</h1><p>为什么我们要在页面插入视频呢，因为视频可以生成很多好效果，这些东西如果放在页面上，无论使用css或者骨骼动画等方法，性能都未必比视频好。<br>因此，当我们需要的交互不多的时候，使用视频展示较炫的效果是可取的。</p>
<p>参照曾经挺火的<a href="http://wefire.qq.com/act/a20150826kris/wb/index.htm?ADTAG=a20150826kris.tiaozhuan.wb" target="_blank" rel="external">吴亦凡html5</a>。我们可以看到，所有基本比较炫的效果其实都是视频。</p>
<p>如果你要插入视频，一般格式有两种。视频网站提供的iframe或者使用html的video标签。</p>
<p>我们首先来谈谈使用video标签的。</p>
<h1 id="内嵌">内嵌</h1><p>这个问题主要针对的是iOS。</p>
<p>我们可以看到上述html5例子里，视频都是内嵌在页面里，给我们的感觉就是页面在动。但是在iOS中，video标签是会直接使用系统原生视频播放器播放的。</p>
<p>那就GG了，直接露马脚了。其实加个标签就好。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video class=<span class="string">"video-box"</span> x-webkit-airplay=<span class="string">"true"</span> webkit-playsinline=<span class="string">"true"</span> preload=<span class="string">"auto"</span> src=<span class="string">"http://ossweb-img.qq.com/images/wefire/act/a20150826kris/v3.mp4"</span>&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>
<p>没错就是这个。。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webkit-playsinline=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></p>
<p>通过标签允许video内联播放，记得不要把你的video的css属性里display设为block之类的，如果有，去掉或者改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:inline</span><br></pre></td></tr></table></figure></p>
<p>这里顺便说说x-webkit-airplay属性，这个是用于调用苹果官方的airplay服务的。一般用于多个屏幕共享的。我查查是这样的。由于我也没怎么用过这个服务，其实不添加他也没有什么大影响。</p>
<p>不过可能方便于共享状况的其他设备吧。如果有比较清楚这个属性的欢迎告诉我。</p>
<h1 id="控制条">控制条</h1><p>是否区别为视频，控制条是一个标志物。</p>
<p>在iOS下，禁止这个属性十分简单。不要添加controls属性就好了。</p>
<p>添加了controls会自动绘制控制条。</p>
<p>但是在安卓的微信里，微信调用了腾讯的x5浏览器，这个就有bug了……</p>
<p>可以看看<a href="http://x5.tencent.com/guide?id=2009" target="_blank" rel="external">文档</a>的9、24、32条。</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20160109123002.png" alt="x5对于视频控件的解释"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20160109123940.png" alt="x5对于强制播放器面板的解释"></p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20160109123413.png" alt="x5对于qq域名下的controls隐藏解释"></p>
<p>难道我们就此GG了吗？</p>
<p>哈哈哈，怎么可能。那就把视频放大，把控制条挤出视口呗！</p>
<p>我们可以拍一个视频，周围留下一些没有的空隙，然后放大这个视频，让其稍稍超出视口。由于控制条总在video标签下的最底，因此，他就会处于视口外，客户无法控制。</p>
<h1 id="自动播放">自动播放</h1><p>其实自动播放本来是一个很简单的属性。因为在标准里写明有autoplay属性。但是，各种敬爱的产品都认为，自动播放太残暴，会消耗用户的流量，所以，我们禁止autoplay属性！</p>
<p>好的，这种情况下，怎么办呢。</p>
<p>在iOS下，我们直接调用video.play()函数进行播放就好了。虽然要写多一个代码。</p>
<p>但是，是的，X5又来了！</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20160109124030.png" alt="x5对于自动播放的控制"></p>
<p>这个我们可以看到大家的解决方式都是一致的。</p>
<p>利用touchstart来进行触发，把整个页面绑入事件，当用户一旦触碰到页面就开始播放。因为用户几乎不可能不触碰页面，所以就给了用户自动播放的体验。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(document).one(<span class="string">'touchstart'</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">   var v2 = query(<span class="string">'#videoIndex2'</span>);</span><br><span class="line">   v2.play();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其实这个方法也是挺好的，因为我们视频文件都要加载，在这之前可以用一个图片进行覆盖，然后点击后去除图片，这段交互时间可以保证我们的视频加载不被人发现。</p>
<h1 id="poster">poster</h1><p>poster也是一个坑，poster的属性表明他只会按照原图的大小进行展示，不会对图片进行任何拉伸。所以如果你想用一个响应式的图片的话。在前面覆盖img吧。</p>
<p>但是这里有一个细节，没错，也是X5。</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20160109124859.png" alt="x5对于视频独立view的解释"></p>
<p>就是说，一旦视频开始播放，你不能再在上面添加其他元素了……</p>
<p>没错就是这么坑。不过也就不要添加了，直接视频隐藏掉就好了。</p>
<h1 id="video事件">video事件</h1><p>video可以监听这几个事件，play,pause,ended。分别对应视频播放、暂停、结束播放三个细节。利用这几个事件你可以监听视频。</p>
<p>然后如果你想做暂停的时候给视频弹些元素的话，在iOS是可以尝试的，安卓估计可以洗洗睡了。到时候暂停直接把视频隐藏掉吧。然后再浮动你的元素。</p>
<h1 id="默认行为">默认行为</h1><p>在手机上一般会有些默认行为，例如长按选中之类的。这个如果先前没有做防止，而且视频会诱导用户长按的话。可以写一下。这个在我之前的文章也有提过。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-webkit-user-select : none; </span><br><span class="line">-webkit-touch-callout:none;</span><br></pre></td></tr></table></figure>
<h1 id="iframe">iframe</h1><p>接下来再讨论下视频网站给的iframe，这里iframe当然可以内嵌的了，但是由于跨域限制，你不能制造什么自动播放或者监听等方法了。就酱。</p>
<h1 id="后记">后记</h1><p>其实这篇文章应该在一个月前就应该写的，但是那时候由于业务没有做完，所以就没有继续研究下去，这个星期重新拾起这项业务，所以就重新研究了下。</p>
<p>这项业务主要是研究怎样在微信页面里使用视频，所以针对的主要是微信自己所使用的浏览器组件，其余的一些奇怪的手机组件没有怎么测试。当然了，现在市面上手机这么多，我也难以覆盖全。如果大家看到有纰漏，欢迎提出。</p>
<p>差不多这样吧，想到再补充2333。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么使用视频">为什么使用视频</h1><p>为什么我们要在页面插入视频呢，因为视频可以生成很多好效果，这些东西如果放在页面上，无论使用css或者骨骼动画等方法，性能都未必比视频好。<br>因此，当我们需要的交互不多的时候，使用视频展示较炫的效果是可取的。</p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈最近做的SVG]]></title>
    <link href="http://yoursite.com/2016/01/09/sth-about-svg/"/>
    <id>http://yoursite.com/2016/01/09/sth-about-svg/</id>
    <published>2016-01-09T03:26:28.000Z</published>
    <updated>2016-01-09T03:52:38.187Z</updated>
    <content type="html"><![CDATA[<p>其实svg是挺有用的图像表现方式。首先明确一下一些常见的优点：</p>
<ul>
<li>矢量化</li>
<li>文本控制，容易编辑</li>
<li>大小较小</li>
<li>css比较容易控制</li>
</ul>
<p>当然，还是有些众所周知的缺点</p>
<ul>
<li>毕竟运用了dom标签</li>
<li>跑动画真心不合适</li>
<li>是用元素控制交互 </li>
</ul>
<p>基于这几个原因，所以一般svg都是用于一些静态图片的替代。因为矢量的特点，他对于缩放的兼容性比较好。而且CSS可以直接控制这种优良属性，也方便了程序员进行直接操控。</p>
<p>插入svg其实有好几个方式。</p>
<ul>
<li>直接用img插入</li>
</ul>
<p>这种情况下svg就相当于一个图片。这种使用的方式是最简单的，但是我们不能利用css去操控它的属性。这对于一些不需要更换的svg是挺经济的方式。</p>
<ul>
<li>使用backgroud属性写入</li>
</ul>
<p>这种情况一般用于你不想用img或者svg标签的时候使用。其实把代码直接写在css样式里也不坏。</p>
<ul>
<li>使用svg标签进行内联</li>
</ul>
<p>这种情况一般可以用于那些你可能要经常操作的svg文本。内联的svg我们可以通过css修改他的各种属性，例如我们可以直接通过添加一个class进行换肤等等。</p>
<p>基于这次业务的需求，我选择了svg。因为我们可能频繁修改他的样式。</p>
<p>其实我有打算过一种模式，我通过在线拉取svg文件，抽取他当中的xml代码，然后生成内联svg。不过这种模式在手机上并不怎么可行。</p>
<p>因此我现在的做法都是直接传输svg代码，然后内联到html中。</p>
<p>为了满足我的可以各种更改的需求，我首先要将收到的代码进行过滤。</p>
<p>由于我们客户一般修改的是颜色，因此我需要把形状属性的颜色属性去掉。</p>
<p>形状属性只要有以下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;circle&gt;</span><br><span class="line">&lt;ellipse&gt;</span><br><span class="line">&lt;line&gt;</span><br><span class="line">&lt;path&gt;</span><br><span class="line">&lt;polygon&gt;</span><br><span class="line">&lt;polyline&gt;</span><br><span class="line">&lt;rect&gt;</span><br></pre></td></tr></table></figure>
<p>我需要做的是把其中的fill，stroke等属性过滤掉，然后利用css控制这些属性。就可以达到我需要的效果。</p>
<p>这里主要遇到的坑有两个。</p>
<ul>
<li>android里stroke-width=0px属性失效。</li>
</ul>
<p>这个在早先的文章里也提过，加个判断，如果是0就不要添加stroke属性就好。</p>
<ul>
<li>symbol的id</li>
</ul>
<p>这个算是自己傻逼的一个例证吧。symbol是svg一个常用的标签。代表元件，用于东西复用的，利用use标签调用。symbol使用id进行区别。如果你添加了多个symbol是相同id的话，use拿到的当然永远是第一个了。</p>
<p>所以，但凡以后遇到添加id的，记得增加随机id保持其独立性。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>其实svg是挺有用的图像表现方式。首先明确一下一些常见的优点：</p>
<ul>
<li>矢量化</li>
<li>文本控制，容易编辑</li>
<li>大小较小</li>
<li>css比较容易控制</li>
</ul>
<p>当然，还是有些众所周知的缺点</p>
<ul]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[为了离开你，我做了什么]]></title>
    <link href="http://yoursite.com/2016/01/01/my-days-in-army/"/>
    <id>http://yoursite.com/2016/01/01/my-days-in-army/</id>
    <published>2016-01-01T07:40:23.000Z</published>
    <updated>2016-01-01T08:58:26.958Z</updated>
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=168091&auto=0&height=66"></iframe>


<blockquote>
<p>这篇文章我不会讨论任何关于身份的事情，我只是说说我在这四年，我自己到底做了些什么。</p>
<p>仅以此纪念，我走过的那些路。</p>
</blockquote>
<p>在我发现我想离开这个地方的时候，我已经基本快要完成我的大一学业了。那个时候，我的学习成绩还不错。在我面前摆的路有几种。</p>
<ul>
<li>好好学习，拿到毕业证书再考虑</li>
<li>放弃大学，出国深造</li>
<li>放弃大学，复读再战</li>
</ul>
<p>我是一个颇为任性的人，于是我很快就排除了一切安稳的做法。然后我挑选的第一条路，是出国深造。</p>
<p>于是我就开始一个人去逛各种的留学机构，并且在各种衡量下，选定了日本作为目标国家。按照家庭基础算计，我可以在日本拼大概两年，然后就依靠半工读。我那时候坚定地以为凭借自己的能力肯定可以闯出一片天。没办法，有时候傻逼就是那么自信……</p>
<p>于是就被各种人做我的思想工作，然而都没有什么卵用。最后是父亲直接断掉了我的计划。</p>
<p>然后，我就开始考虑复读二战。甚至是父亲以断绝父子关系来要挟也没有拦住。</p>
<p>最后，我为什么还是留下来读大学了呢？因为那天晚上我抛了十次硬币，结果都只有一个，就是继续读下去。</p>
<p>有的时候，改变你的生命不是一切理性的行为，可能只是一个很玄乎的途径。信不信由你。</p>
<p>好的，留下来之后，其实就是一个很简单的问题了。</p>
<p><strong>当你要做一个你不喜欢的工作，你应该怎么办？</strong></p>
<p>我的回答是，做好一切准备跳槽的准备。</p>
<p>所以首先要面对的问题是，你要跳去哪？</p>
<p>一般来说，正常的中国大学生，对于自己未来要做什么，是99.99%不清晰的。</p>
<p>于是，我把自己及后的几乎所有空余时间，都去找这个答案。</p>
<p><strong>假如你不知道自己要做什么，知道多点绝对是没错的。</strong></p>
<p>大一的时候我掏钱去学了CCNA，这让我很快就对网络运维有了初步理解。另外加上我平常在校园网络中心有兼职的经历，对于网络的理解就更多了。</p>
<p>大二的时候，我选择了深造的方式。去尝试参加竞赛。但是，囿于体系的原因和能力的问题，可以说效果不怎么好。而那时候，我对于读研的规则也产生了了解。知道了退出后读研也不一定会很顺利。</p>
<p>于是，我马上将本科毕业后参加工作作为了我的第一个目标。</p>
<p>那么这个时候，遇到的问题就很明显了。工作的时候我到底需要具备些什么？</p>
<p>这种情况下，实习是最快了解的途径。但是，我的训练时间决定了我没有办法去参加各种大公司的实习。而且那时候我只是大二，能力也并不具备。但是实习这个问题，对于我来说还是颇为迫在眉睫的。毕竟，容许我试错的机会不多。</p>
<p>那时候刷微博让我进入到了公益圈。让我意识到了做公益的这一群人。</p>
<p>毫无疑问，这群人改变了我很多。在我加入公益圈前，我整个人可以说是灰暗的。是这群人点亮了我的人生。他们的故事，我以后再表。</p>
<p>当然也很感谢这群人，给了我一些机会。我去了一个公益机构做网站和微信公众号的运营。</p>
<p>但是我很快就发现了一个事实，整个公益机构人数不足二十，我是唯一一个技术人员。但是，我至少知道，我要做什么。在实践中，我也会了解做什么。这就已经够了。</p>
<p>有的时候，甚至机构内其他人也不清楚可以做什么，这时候就需要发挥自己的想象力，去构建一个产品体系。</p>
<p>于是，我做了智能的报名系统，做了微信回复的机器人，做了网站，跑了前端后端。尝试过用SAE，尝试过阿里云，也就是那时候，知道了很多学校不知道的事。虽然和真正的工作，还是有很多偏差，但是至少是一个机会。</p>
<p>其实在公益机构真的很开心。虽然我们刚开始的时候都是窝在一个小民房里工作。反正那段日子，尝试过20公里徒步，跑过马拉松，参加各种聚会。度过了大学里最灿烂的日子。依然记得，大学里最幸福的一次圣诞，十来人，窝在透风的民房里，开着网易云听着《good time》，打着火锅。幸福其实挺容易。</p>
<p>后来，我离开了那个机构，这个时候，我基本知道自己以后会是一个程序员了。然后就是漫长的找工作。</p>
<p>找工作也是挺庆幸的，因为那意味着你有很多机会去真正了解你的职业。在找工作前，我其实很多都不懂，我只知道自己是一个做网站的，网站如何分类，我不清楚。但是每次面试就是一次学习。就是在一次次面试中，找到自己的定位，选择自己喜欢的东西。</p>
<p>找到工作后，我来到了大四，这个时候，要做自己那时候最需要做的事，就是训练备战考核。</p>
<p>但是心态真的定下来了，于是就很坦然地去做。抽空写论文，学习自己想做的事。一切都很顺利了。</p>
<p>好吧，流水账写完了，回答几个大家常有的问题。</p>
<blockquote>
<p>我不喜欢我的工作，我该怎么办？</p>
</blockquote>
<p>假如确定真的不喜欢，那就做好本分，然后利用一切可以的机会，去找自己喜欢的工作，去为自己喜欢的工作作准备。就这么简单。</p>
<p>感激这份你不喜欢的工作，因为他让你淡定下来了，真的可以审视自己了。</p>
<blockquote>
<p>我觉得自己没什么能力，但是这个工作岗位没有人带我，我觉得我无法成长。</p>
</blockquote>
<p>抓住一切机会吧，我们活在最好的年代，有网络、所有的东西都是共享的。进大学的时候，师兄给我们上了一堂课，我只记得了最有用的四个字母——STFW。</p>
<p>当然，即使这样做，你学习到的毕竟不是体系。因此，找书看，找人问，找任何机会是打造自己。</p>
<p>你会很感恩这个时间。想像一下，你被关在一个黑房子里，遇到任何光，你都会兴奋若狂，这个时候你的学习能力往往是最强的。好好利用你手上的一切。</p>
<blockquote>
<p>有一个很好的机会摆在我面前，但是我却要干其他事，不能去利用这个机会。</p>
</blockquote>
<p>这种东西发生在我面前太多了。最近的一说，就是大四我训练了一整年，基本没有机会碰电脑。训练完整个人都没什么力了。这个时候就是靠自己的心理调节能力了。如果你真的很想做一件事，哪怕你只有一丝力气你都会去做。如果你发现自己总是那么茫然，问问自己，你真的想改变自己吗？</p>
<blockquote>
<p>关于人生的路径选择</p>
</blockquote>
<p>这段话，是我说给一些人听的。</p>
<p>你不知道，我做上面的一切的时候，内心是多么的彷徨的。你也无法体会，我面对很多次失败的时候，内心是多么无助的。</p>
<p>你不知道的是，我不止一次地说，我自己过着做贼一样的生活。</p>
<p>你也不知道的是，我有多少次一个问题都没能回答就被人赶出面试室的境况。</p>
<p>你也不知道，我在自己最亲的朋友面前，像条狗一样哭过多少次。</p>
<p>有的时候，你可能看着一个人是光鲜的。但是你不知道，他为了这一切，在哪个破角落哭过多少次。</p>
<p>有的时候，你可能看着一个人是乐天的，但是你不知道，他的内心，可能正在滴血。</p>
<p>做每件事的时候，想好最差的境况会是怎样的。想想假如你真的找不到工作，真的你该怎么办。</p>
<p>假如你真的想过，至少你不会那么任性。至少你会做一些准备，至少你会有一些心理预期。甚至，很可能，你就想通了，知道自己真正需要的是什么。做好现在的事，也挺不错。</p>
<p>我曾经和人说过，其实没有状态是糟糕的，糟糕的是我们没有准备好接受这个状态。</p>
<p>没有路是错的，只有迷路的人而已。</p>
]]></content>
    <summary type="html">
    <![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近做过的一些事]]></title>
    <link href="http://yoursite.com/2016/01/01/some-trap-i-meet-these-days/"/>
    <id>http://yoursite.com/2016/01/01/some-trap-i-meet-these-days/</id>
    <published>2016-01-01T06:59:11.000Z</published>
    <updated>2016-01-01T07:36:54.293Z</updated>
    <content type="html"><![CDATA[<p>很久都没有空写博客了。难得元旦，回来记录下最近做的事。</p>
<h1 id="svg">svg</h1><p>svg还是一个挺有用的属性，用来绘制一些想要的形状。他最大的优点是可以随便切换颜色。这很符合我们的组件需求。</p>
<p>内联svg还是比较容易的，直接在页面上写入代码就好了。支持度还是不错。</p>
<p>当然你还有很多种方法使用svg，例如在属性的backgroud上写入svg代码，又或者直接引入svg图片。</p>
<p>不过这里需要注意一个点，在android手机上，svg得stroke-width：0px属性会失效。因此如果你又有stroke属性，又需要调整它的宽度为0。在安卓手机上你可以直接把stroke设为transparent或者移除等等。</p>
<h1 id="微信授权页面跳转问题">微信授权页面跳转问题</h1><p>这算是一个颇为常用的场景。一个web应用，走到某一步需要跳转微信进行授权，但是微信授权完毕后是一个redirect，给你带回来一些微信上的信息。这相当于重新打开一次你的应用。这对于客户体验来说未必是最佳的。</p>
<p>那么也就是说，我们在微信授权的时候，要记录一下我们现在得web APP的状态。当然办法有很多，例如我们可以写localStorage等等。但是我还死嫌这个办法稍微有点麻烦。</p>
<p>既然微信会重定向到我们这个页面的地址，那么我们只要在这个页面的地址上做些手脚，记录下一些参数表明状态就好。</p>
<p>一般来说我们会才用window.location.hash或者window.location.search属性。但是令人可悲的是，微信会把他们清掉。</p>
<p>不过还是有机会的，微信会在你的页面上读取你的当前地址，无论这个地址是什么形式。那么问题就变得简单了，我们只需要修改window.location.href就可以了。当然我们不能直接更改，那样子会刷新页面，于是就用一个很传统的方法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.history.pushState(<span class="string">"test"</span>, <span class="string">"test"</span>, location.href +<span class="string">"some code you need to write"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="多说接口利用">多说接口利用</h1><p>多说是个很方便的应用，你只要插入就可以使用，不需要自己架构评论系统。不过有的时候，我们的需求会多一点。比如，我们想在自己的微信公众号的一些页面里面接入多说评论，你就会发现一个很奇葩得状况，你评论竟然要去多说的公众号进行授权。这显然不是我们想要的结果。</p>
<p>于是这个时候，就直接使用多说的接口就好了。</p>
<p>翻阅一下<a href="http://dev.duoshuo.com/docs" target="_blank" rel="external">多说文档</a>，我们很快可以找到自己需要得接口，获取评论啊各种。这些按下不表。我们谈谈怎么不授权进行评论。</p>
<p>我采用的是多说的<a href="http://dev.duoshuo.com/docs/512d6e2e418847315a000001" target="_blank" rel="external">匿名评论接口</a>。不过你很快就会发现，匿名评论下不能写入头像。辣肿么办呢。你可以用其余字段表示你的头像，例如author_url，第一这个字段不常用、第二他也是地址，在数据库保存的格式应该会一致。然后就可以解决这个问题了。</p>
<p>不过多说的所有接口都没有cros设置，因此你要自己进行跨域请求，万幸的是他提供了jsonp的格式。那么就好办很多了。</p>
<p>如果是get的话，直接这么调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	url: <span class="string">'http://api.duoshuo.com/threads/listPosts.jsonp?'</span>,</span><br><span class="line">	<span class="built_in">type</span>: <span class="string">'GET'</span>,</span><br><span class="line">	data:&#123;&#125;,</span><br><span class="line">	dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">	error: <span class="keyword">function</span>(xhr, status, error) &#123;</span><br><span class="line">		console.log(error);</span><br><span class="line">	&#125;,</span><br><span class="line">	success: <span class="keyword">function</span>(data) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果是post的话，自己找方法吧。因为我只是评论接口需要post，然后他能够收到，其余的我就不管鸟。</p>
<h1 id="数据的版本系统建立">数据的版本系统建立</h1><p>这个给我的一个很深刻的体会是。如果是主数据，一定要做version版本处理，并且最好备份多一份。然后建立一个升级体系。当升级出错的时候，调用最初的备份，重新升级。能解决很多问题。</p>
<h1 id="一些编写代码的反思">一些编写代码的反思</h1><p>修改了比较多的代码，看到过一个弹窗，每次交互都会进行全弹窗重绘和跟后台数据拉取。</p>
<p>在代码设计的时候，一定要注意组件化，把东西抽取出来。</p>
<p>和后台的交互，要充分考虑到压力和延时的问题。删除不必要的链式等待等等。</p>
<h1 id="CSS样式">CSS样式</h1><p>CSS真的很强大。最近用calc()属性解决了页面footer的问题。</p>
<p>一般来说，footer最烦的问题是，页面太短怎么办。假如页面太短，footer很容易顶上去，底下留下一段空白，这无疑是极难容忍的。</p>
<p>这个时候，我们需要给中间的content设置一个高度，把它顶下去。那么这个高度真么算呢。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-height: <span class="number">500</span>px;</span><br><span class="line">height: calc(<span class="number">100</span>% - <span class="number">200</span>px);</span><br></pre></td></tr></table></figure>
<p>这样设置就好了，首先，根据你的content，给他一个最小高度。以免遇到极小的屏幕，他被收了进去，footer反而一直在页面上看不到一部分。</p>
<p>然后利用calc属性，才用视口高度（100%）减去footer和header的高度，这个是用于屏幕太大的时候，撑开footer和header。</p>
<p>这样子就完美解决了页面过短的时候的footer问题了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很久都没有空写博客了。难得元旦，回来记录下最近做的事。</p>
<h1 id="svg">svg</h1><p>svg还是一个挺有用的属性，用来绘制一些想要的形状。他最大的优点是可以随便切换颜色。这很符合我们的组件需求。</p>
<p>内联svg还是比较容易的，直接在页面上]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[再见，2015]]></title>
    <link href="http://yoursite.com/2015/12/31/goodbye-2015/"/>
    <id>http://yoursite.com/2015/12/31/goodbye-2015/</id>
    <published>2015-12-31T08:03:01.000Z</published>
    <updated>2016-01-01T06:56:13.509Z</updated>
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="http://music.163.com/outchain/player?type=2&id=3880078&auto=0&height=32"></iframe>

<p>我现在一个人，坐在北京的小屋里，听着这首歌，敲下这篇文章。</p>
<p>2015对我来说，意味着什么。回想起来，似乎发生的事情太多，有点理不清头绪。</p>
<p>只是忽然想起，今年的生日是正月初一，也是挺特别的。</p>
<p>听了很多吐槽，也看了很多很美好的事，2015就这么走了，猝不及防。或许中国人对于西元年，真的没有什么特别在意的，但是直到今天仔细回首。认认真真地想了一遍。或许，很多年后，我会觉得今年真的很重要吧。</p>
<p>一月份的时候，送走了爷爷。</p>
<p>总有人觉得国防生欠了我很多，爷爷最后一个中秋，我不在他身边。大半年没见面后，我见他的时候，他已经没有力气去睁开眼睛。我记得我在床边哭了，只是重复的说着，我会照顾好自己。爷爷走的时候，只有爸爸在他身边，似乎一家子都是这个性格，总会把不好的事收在最后。</p>
<p>然而没想到的是，年中的时候，外公也走了。</p>
<p>或许总有离开的时候，无论一个人如何。外公走的时候，我不敢发任何消息，没多久就要考核了，我记得是这样的。</p>
<p>外公和爷爷丧礼上，我都写了悼词，我都没有哭。看着自己的亲人哭倒在自己怀里，忽然意识到，是该要长大了。</p>
<p>从外公回学校的路上，我一直听着《刘哈哈与大先生》，然而我不知道为什么我哭的稀里哗啦。我最记得的场景是，外公的丧礼上，他的兄弟高喊着“着火啦，着火啦”，就好像我外公并没有离去一样。我后来想了想，我走的时候，会有这么送我的人吗？</p>
<p>上半年，我都是沉浸在国防生的生活里。日子是简单的，我唯一要做的是好好训练，等待离开的日子。没试过这么喜欢跑步。虽然以前也跑过马拉松，但是并没有这么拼过。仍然印象深刻的是，跑中环的最后一段坡道，跑着跑着，然后看到学校。就仿佛，所有艰辛都会过去一样。</p>
<p>现在轻轻地回首下四年。曾经恐慌过，曾经彷徨过，曾经对着电话说，我觉得我就像做贼一样。曾经放弃过，曾经执着过。到现在，还是很感激大一那个暑假的自己，毫不犹豫地奔走各个出国机构，去做自己不懂的事。从那一刻开始懂得，真正能救自己的只有自己。</p>
<p>在漫长的等待后，来到了北京。第三次来北京了。总是对北京有种奇奇怪怪的感觉。</p>
<p>这里可以天很蓝，这里也可以天很灰。最喜欢的是结冰的后海，再孤独也有图图陪我。我会在路上听着宋胖子的歌，好好地感受这份孤单，也好好地享受这份自由。或许会令很多人不明白，我为什么要跑那么远。去一个近乎陌生的城市。但是有的时候人生不就是这样的吗？</p>
<p>我很喜欢现在的这份工作，尽管我还很渣。经常性地发傻，总是想不懂。但是我真的很快乐。那就够了，无论我在哪。</p>
<p>有的时候，抬起头一看，发现满目疮痍。看着自己的家一点点崩坏，也不知道是什么感觉。</p>
<p>我们总会因为一些人喜爱上了一座城，我们也会因为一些人离开一座城。</p>
<p>其实就是这样而已。</p>
<p>我过得很快乐，我也过得很不快乐。但是有的路，就是注定了要自己走下去。</p>
]]></content>
    <summary type="html">
    <![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="http://music.163.com/outchain/player?type=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[抓取视频网站分享经历]]></title>
    <link href="http://yoursite.com/2015/11/14/video-website/"/>
    <id>http://yoursite.com/2015/11/14/video-website/</id>
    <published>2015-11-14T09:25:29.000Z</published>
    <updated>2015-11-14T10:24:28.559Z</updated>
    <content type="html"><![CDATA[<p>业务上的需求，需要引入视频网站的分享。于是小小的研究了一些视频网站。其实现在许多视频网站除了传统利于客户的分享外，也会有便于开发者的代码，不过这种代码的程度因各视频网站而不同。有的网站会提供超级棒的通用代码，没错就是iframe，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">'http://www.tudou.com/programs/view/html5embed.action?type=2&amp;code=gHh8ZOXj5pg.html&amp;lcode=92J2xqpSxWY&amp;resourceId=0_06_05_99'</span> allowtransparency=<span class="string">'true'</span> allowfullscreen=<span class="string">'true'</span> allowfullscreenInteractive=<span class="string">'true'</span> scrolling=<span class="string">'no'</span> border=<span class="string">'0'</span> frameborder=<span class="string">'0'</span> style=<span class="string">'width:480px;height:400px;'</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<p>这种通用代码在很多浏览器上面都是支持的，直接引用就可以。</p>
<p>而稍微不友好一点的网站呢，则会提供用embed包装的html代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object width=<span class="number">1460</span> height=<span class="number">880</span>&gt;&lt;param name=<span class="string">"movie"</span> value=<span class="string">"http://share.vrs.sohu.com/2697007/v.swf&amp;topBar=1&amp;autoplay=false&amp;plid=9063689&amp;pub_catecode=122102&amp;from=page"</span>&gt;&lt;/param&gt;&lt;param name=<span class="string">"allowFullScreen"</span> value=<span class="string">"true"</span>&gt;&lt;/param&gt;&lt;param name=<span class="string">"allowscriptaccess"</span> value=<span class="string">"always"</span>&gt;&lt;/param&gt;&lt;param name=<span class="string">"wmode"</span> value=<span class="string">"Transparent"</span>&gt;&lt;/param&gt;&lt;embed width=<span class="number">1460</span> height=<span class="number">880</span> wmode=<span class="string">"Transparent"</span> allowfullscreen=<span class="string">"true"</span> allowscriptaccess=<span class="string">"always"</span> quality=<span class="string">"high"</span> src=<span class="string">"http://share.vrs.sohu.com/2697007/v.swf&amp;topBar=1&amp;autoplay=false&amp;plid=9063689&amp;pub_catecode=122102&amp;from=page"</span> <span class="built_in">type</span>=<span class="string">"application/x-shockwave-flash"</span>/&gt;&lt;/embed&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure></p>
<p>这种html代码在市面上大部分浏览器上可以播的，但是可惜的是，手机上不可以。而这也造成了众多的不便。因为我要生成的页面会在手机上。</p>
<p>更有甚者，直接提供一个flash源。辣真是歪日了=-=，手机不能放flash啊。</p>
<p>OK，那么我们这个时候只能采取调用手机调试的方式，获取其手机上的video标签，观察他的video标签就可以了。</p>
<p>本次业务的目标，是通过播放页的url直接引入通用代码。那么也不是难事，如果有通用代码就引入通用代码，如果没有，我就给他写一个。</p>
<p>困难的点在于，并不是每个网站都会仁慈地把vid放在url上。<br>现在咱们来梳理一下。</p>
<p>youku</p>
<p>真是一个友好到爆的视频网站，直接提过iframe代码不说，而且iframe是根据vid来进行获取的。视频源我没有探索，因为不需要。</p>
<p>而这个vid则直接写在了url上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://v.youku.com/v_show/id_XNTY0MzE4NTE2.html?from=y1.<span class="number">3</span>-idx-uhome-<span class="number">1519</span>-<span class="number">20887.212790</span>-<span class="number">212949.1</span>-<span class="number">1.1</span>-<span class="number">8</span>-<span class="number">1</span>-<span class="number">1</span>-<span class="number">0</span><span class="comment">#paction</span></span><br></pre></td></tr></table></figure></p>
<p>请看上图的这个id_<strong><strong><em>*</em></strong></strong>.html。就是大家想要的id，我只需要将其替换就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe height=<span class="number">498</span> width=<span class="number">510</span> src=<span class="string">'http://player.youku.com/embed/XNTY0MzE4NTE2'</span> frameborder=<span class="number">0</span> allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<p>tudou<br>也是一个十分友好的网站，提供了iframe。页面url和iframe拥有直接的关系。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.tudou.com/albumplay/<span class="number">92</span>J2xqpSxWY/gHh8ZOXj5pg.html</span><br></pre></td></tr></table></figure>
<p>在albumplay后面的是lcode，再后一格的是code。只需要进行拼接，就可以获得分享的代码。<br>当然有的时候lcode不是必须的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.tudou.com/programs/view/EfLFVsQ486o/</span><br></pre></td></tr></table></figure>
<p>比如在这种url中，我们直接把lcode置位空即可。</p>
<p>细心的你还会发现这种url<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.tudou.com/listplay/Yxxcbtz1rQ0/LAsexrGoJ7c.html</span><br></pre></td></tr></table></figure></p>
<p>没错，拥有的是listplay。而这三种代码的不同之处，就是他们的type变量是不一样的。分别为2、0、1。大家可以尝试一下啊。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">'http://www.tudou.com/programs/view/html5embed.action?type=2&amp;code=gHh8ZOXj5pg.html&amp;lcode=92J2xqpSxWY&amp;resourceId=0_06_05_99'</span> allowtransparency=<span class="string">'true'</span> allowfullscreen=<span class="string">'true'</span> allowfullscreenInteractive=<span class="string">'true'</span> scrolling=<span class="string">'no'</span> border=<span class="string">'0'</span> frameborder=<span class="string">'0'</span> style=<span class="string">'width:480px;height:400px;'</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<p>腾讯视频</p>
<p>腾讯视频也是一个很友好的视频网站，基本上都提供了通用代码。但是估计是考虑到版权的问题。有一些有版权的视频，他们的播放页url是经过一定的加密的。例如这种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://v.qq.com/cover/<span class="number">2</span>/<span class="number">2</span>fcm0ffmcs4ltvu.html</span><br></pre></td></tr></table></figure></p>
<p>当然，有其他的是没有加密的，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://v.qq.com/cover/q/qnj1lyl17r2vz5i.html?vid=z0018mfqzbo</span><br></pre></td></tr></table></figure></p>
<p>vid=多少，清楚明白，替换即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=<span class="string">"0"</span> width=<span class="string">"640"</span> height=<span class="string">"498"</span> src=<span class="string">'http://v.qq.com/iframe/player.html?vid=z0018mfqzbo&amp;tiny=0&amp;auto=0'</span> allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<p>新浪视频</p>
<p>这个我就有点醉了。不提供通用代码，不过这也不是难事。我只需要打开手机调试，看看他的video标签就可以了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=<span class="string">"myMovie"</span> src=<span class="string">'http://v.iask.com/v_play_ipad.php?vid=139215368&amp;amp;tags=newsList_web&amp;amp;time=1447494598240&amp;amp;rd=0.958624585531652'</span> controls=<span class="string">""</span> autoplay=<span class="string">""</span> preload=<span class="string">"auto"</span> style=<span class="string">"width: 640px; height: 516px;"</span> poster=<span class="string">""</span>&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure></p>
<p>恩呢，这个vid真是棒棒的，然后问题就来了。在很多页面，这个vid和url串上的数字没有啥关系。鉴于我不是解密大师，我暂且放弃了这个功能。</p>
<p>ku6</p>
<p>酷6现在应该不算出名吧，所以，他也没有提供通用代码。然后老方法，拿到了video标签。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video preload=<span class="string">"meta"</span> src=<span class="string">'http://v.ku6.com/fetchwebm/8VHjSp3_PGA2-3pT40ut5Q...m3u8'</span> controls=<span class="string">""</span> poster=<span class="string">'http://vi0.ku6img.com/data1/p16/ku6video/2015/11/13/13/1452946133184_152038688_152038688/107.jpg'</span> style=<span class="string">"margin: 0px; padding: 0px; width: 100%; height: 100%; z-index: 1; background-color: black;"</span>&gt;浏览器不支持HTML5视频&lt;br&gt;you browser DO NOT support HTML5 video&lt;br&gt;&lt;img id=<span class="string">"KP_vposter"</span> src=<span class="string">'http://vi0.ku6img.com/data1/p16/ku6video/2015/11/13/13/1452946133184_152038688_152038688/107.jpg'</span>&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure></p>
<p>棒棒的，这个m3u8文件大家都看到了吧，然后他的id还和url的id串一模一样，轻松生成通用代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://v.ku6.com/show/<span class="number">8</span>VHjSp3_PGA2-<span class="number">3</span>pT40ut5Q...html</span><br></pre></td></tr></table></figure></p>
<p>sohu</p>
<p>sohu应该是我比较喜欢的一个视频网站，以前看美剧什么的都在上面看。不过他也没有通用代码。而且，sohu的情况就有点特殊。有一个十分好的版权保护策略。涉及版权的视频播放页url加密处理。这种情况一般都是tv.sohu的策略。而网友分享的视频，播放页url也是和id对应的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://my.tv.sohu.com/pl/<span class="number">8397747</span>/<span class="number">82100134</span>.shtml</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe height=<span class="number">498</span> width=<span class="number">510</span> src=<span class="string">'http://tv.sohu.com/upload/static/share/share_play.html#82100134_8397747_0_9001_0'</span> frameborder=<span class="number">0</span> allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<p>又是一次轻松获取。两个code进行一次互换即可。有人可能会问code后面那一串数字是啥。其实那个是清晰度。有人问，为啥没有分享代码，但是你还会用iframe呢？马上揭晓为何。</p>
<p>56网</p>
<p>悲催的56，已经被搜狐收购了。其实我是不知道的，直到我发现他棒棒的通用代码，是sohu的url。醉了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">'http://tv.sohu.com/upload/static/share/share_play.html#82080385_8410600_0_9001_0'</span> width=<span class="string">"320"</span> height=<span class="string">"270"</span> frameborder=<span class="string">"0"</span> allowfullscreen=<span class="string">""</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<p>于是我也不关心他俩的url了，因为真的没法弄了。不过幸运的是，我就此拿到了搜狐网站的通用代码。真是棒棒哒。</p>
<p>爱奇艺</p>
<p>前不久才崛起的一个视频网站。棒棒的有分享代码。不过页面url有加密。和vid没啥关系。放弃，直接贴通用代码吧。</p>
<p>凤凰网</p>
<p>没有通用代码，于是拷下来了通用代码，不过也没有啥卵用，页面url是加密过的。</p>
<p>音悦台</p>
<p>好多歌，真是棒棒的。所以估计版权问题时挺严重的。没有通用代码。找video标签，很兴奋的看到了url中的字串和videoID一样。结果，这个videoID不是决定性因素。暂且放弃。</p>
<p>letv<br>与音悦台一样，vid不是决定性因素。</p>
<p>另外，谈一些有趣的发现。</p>
<p><img src="http://7xo9s8.com1.z0.glb.clouddn.com/微信截图_20151113201451.png" alt=""></p>
<p>没错，如你所见，爱奇艺在打log。</p>
<p>另外，不是说在手机端找到video标签嘛=-=<br>video标签的src是干嘛用呢。对的，引入视频。如果没有做限制的话，那个就是你们想要的视频源地址。直接点开，下载吧……在某些网站真的可用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>业务上的需求，需要引入视频网站的分享。于是小小的研究了一些视频网站。其实现在许多视频网站除了传统利于客户的分享外，也会有便于开发者的代码，不过这种代码的程度因各视频网站而不同。有的网站会提供超级棒的通用代码，没错就是iframe，如下：<br><figure class="]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[开发了一个关系图生成页]]></title>
    <link href="http://yoursite.com/2015/11/14/relation-chart-develop/"/>
    <id>http://yoursite.com/2015/11/14/relation-chart-develop/</id>
    <published>2015-11-14T08:40:12.000Z</published>
    <updated>2015-11-14T09:23:58.625Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么想开发这个东西">为什么想开发这个东西</h1><p>最近喜欢上了d3，真是一个超级棒的东西。通过简单容易的绘制，可以弄出很多十分酷炫的效果。大家可以点击<a href="http://toxicjohann.com:8360/home/funnymove" target="_blank" rel="external">这里</a>体验一下。当然啦，d3很多时候还是会用来制作一些有用的漂亮的图表。但是，对于很多真正要用图表的人，接触d3代码还是一些比较困难的事。基于此，我在想，为什么不试试弄一个比较简易的数据收集，然后根据数据直接生成图像呢？</p>
<p>于是，我选择了一个关系图的模型进行尝试。其实D3开发真的很棒，他们本来就是利用json数据收集，然后再根据数据生成图表。那么就是说，我只要弄一个人性化一点的界面，大家就可以调用很多想用的d3图像了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">source</span>: <span class="string">"Microsoft"</span>, target: <span class="string">"Amazon"</span>, <span class="built_in">type</span>: <span class="string">"licensing"</span>&#125;,</span><br></pre></td></tr></table></figure>
<p>于是，我花了一会儿就写出了一个表格，然后用户可以在表格中输入数据。可以填写source,target和type即可。</p>
<h1 id="listgenerate的开发">listgenerate的开发</h1><p>在迅速完成了简单的开发后，我想让客户拥有更多的特权。比如说修改点和线的样式等等。但是在考虑了一下，我发现了一个问题，为什么每次生成友好界面我都要重新编写html页面呢，这其实是一种十分繁琐的做法。要是我的html代码也能根据json代码生成。那么真是棒棒的。</p>
<p>事实上，我觉得这种表格生成的插件，在网上应该还是有的，但是这个需求其实并不是十分复杂。于是我决定自己进行开发。而且我有点嫌弃传统的〈ul〉或者<table>之类得模式。于是我决定采取自定义组件，那样我在开发的时候就会拥有更多的特权。比如我想让他横着摆，斜着摆放都可以。虽然自定义组件现在的支持度并不是很好，但是我也没有支持特别多浏览器的想法。事实上，<strong>我们为何不拥抱新的技术呢</strong>？</table></p>
<p>于是我开始进行尝试。开发难度总的来说还是比较小的。只需要采取递归的方式根据json树不断进行拼接即可。事实上有点绕可能是我想实现的more和delete按钮。因为在生成的时候之后要进行绑定，并且在正确的位置加入所需的代码。</p>
<p>另外，radio的名字在生成的时候重复还得多加一些判断。这个也不是难事。</p>
<p>最后，基于开发的考虑，我加入了自定义属性这一功能，不过这是因为我很多属性都没有加而已，其实我也不是很想加，因为不需要增加这么多无谓的判断，如果真的不是常用的属性。虽然可能写起来会比较绕，不过这个问题也不大，可以在下一版优化。</p>
<p>而我通过了一些class进行了css绑定，因此如果熟悉CSS选择器的话，可以轻松地绑定事件或者进行一些二次开发。不过这种二次开发还是不友善的，我觉得下一步我应该好好考虑一些二次开发这种问题。</p>
<p>另外，适配更多地浏览器还是需要的，因此以后我期望能引入webcomponent.js等更多地polyfill方法，不过暂时的，我觉得做得那么多也是合适。源码已经放在<a href="https://github.com/toxic-johann/listGenerate" target="_blank" rel="external">github</a>上了，大家可以点击<a href="https://github.com/toxic-johann/listGenerate" target="_blank" rel="external">这里</a>进行了解。只是一个比较简单的JavaScript文件。</p>
<h1 id="继续开发关系图页面">继续开发关系图页面</h1><p>那么有了这个插件开发就简单好多了。我只需要写一个json，然后就能生成我需要的页面了，然后调用一下收集数据的函数，根据收集的数据确定用户的需求，直接嵌入到我的d3的数据json里就可以了。</p>
<p>大家可以看看我现在生成页面只需要生成这种json即可。十分方便哈哈哈。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">  <span class="number">0</span>:&#123;</span><br><span class="line">    <span class="number">0</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,show:<span class="string">'source'</span>,name:<span class="string">'source'</span>&#125;,</span><br><span class="line">    <span class="number">1</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,show:<span class="string">'s-group'</span>,name:<span class="string">'sourcegroup'</span>,value:<span class="string">'1'</span>&#125;,</span><br><span class="line">    <span class="number">2</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,show:<span class="string">'target'</span>,name:<span class="string">'target'</span>&#125;,</span><br><span class="line">    <span class="number">3</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,show:<span class="string">'t-group'</span>,name:<span class="string">'targetgroup'</span>,value:<span class="string">'1'</span>&#125;,</span><br><span class="line">    <span class="number">4</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,name:<span class="string">'type'</span>,show:<span class="string">'linktype'</span>,value:<span class="string">'1'</span>&#125;,</span><br><span class="line">    more:<span class="literal">true</span>,</span><br><span class="line">    delete:<span class="literal">true</span>,</span><br><span class="line">    show:<span class="string">'s-group,t-group and linktype can set the group for your node and path.you can set color of group below'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1</span>:&#123;</span><br><span class="line">    <span class="number">0</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,name:<span class="string">'type'</span>,show:<span class="string">'type'</span>,value:<span class="string">'1'</span>&#125;,</span><br><span class="line">    <span class="number">1</span>:&#123;<span class="built_in">type</span>:<span class="string">'color'</span>,name:<span class="string">'color'</span>,show:<span class="string">'color'</span>&#125;,</span><br><span class="line">    show:<span class="string">'you can set your own type color here'</span>,</span><br><span class="line">    more:<span class="literal">true</span>,</span><br><span class="line">    delete:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">2</span>:&#123;</span><br><span class="line">    <span class="number">0</span>:&#123;<span class="built_in">type</span>:<span class="string">'text'</span>,name:<span class="string">'group'</span>,show:<span class="string">'group'</span>,value:<span class="string">'1'</span>&#125;,</span><br><span class="line">    <span class="number">1</span>:&#123;<span class="built_in">type</span>:<span class="string">'color'</span>,name:<span class="string">'color'</span>,show:<span class="string">'color'</span>,value:<span class="string">"#c0c0c0"</span>&#125;,</span><br><span class="line">    show:<span class="string">'you can set your own group color here'</span>,</span><br><span class="line">    more:<span class="literal">true</span>,</span><br><span class="line">    delete:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>现在我的关系图满足了以下的需求。<br>设置起点、终点。<br>给起点、终点、关系进行分组。<br>分组后不同的组别用不同的颜色表示，并且能自定义颜色。</p>
<p>总的来说，这个页面我觉得还是不怎么友好，不过优化这个表格的文案额。还是以后再说吧。</p>
<p>大家可以点击<a href="http://toxicjohann.com:8360/home/relationchart" target="_blank" rel="external">这里</a>进行尝试。在以后我会开发更多地d3图表来方便大家使用。<br>大家可以尝试下有任何问题都和我说。由于我时不时进行开发，因此，其实你可以看到那里有log在输出，甚至页面会坏掉。</p>
<p>另外，如果对源码有兴趣，直接点进去看就好了。我并没有进行任何的加密或者混淆。</p>
<p>##最后</p>
<p>其实，这真的是一个很棒的开发过程。虽然只占用了一点业余时间，但是我很喜欢。越来越觉得开发是个很棒的工作。不过现在自己的点子还是比较少的，要加油。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么想开发这个东西">为什么想开发这个东西</h1><p>最近喜欢上了d3，真是一个超级棒的东西。通过简单容易的绘制，可以弄出很多十分酷炫的效果。大家可以点击<a href="http://toxicjohann.com:8360/home/funnymove"]]>
    </summary>
    
  </entry>
  
</feed>
